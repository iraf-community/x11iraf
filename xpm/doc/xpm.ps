%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {a4tray a4} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 15 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 36 Q
0 X
0 K
(XPM Manual) 200.51 534 T
1 18 Q
(The) 223.31 468 T
0 F
(X) 255.78 468 T
(P) 273.27 468 T
1 F
(ix) 284.26 468 T
0 F
(M) 298.26 468 T
1 F
(ap Format) 315.24 468 T
1 14 Q
(Version: 3.3) 271.41 375.97 T
(December 20) 249.66 343.97 T
1 8 Q
(th) 324.64 347.97 T
1 14 Q
( 1993) 330.86 343.97 T
2 F
(Arnaud Le Hors) 257.01 253.27 T
3 12 Q
(lehors@sophia.inria.fr) 226.84 238.6 T
1 10 Q
(\251 BULL 1990-93) 270 139.23 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 18 Q
0 X
0 K
(Copyright restrictions) 72 681 T
1 10 Q
(Copyright 1990-93 GROUPE BULL) 72 652.33 T
2 F
0.68 (Permission to use, copy, modify, and distribute this software and its documentation for any purpose and) 72 628.33 P
0.41 (without fee is hereby granted, provided that the above copyright notice appear in all copies and that both) 72 616.33 P
0.05 (that copyright notice and this permission notice appear in supporting documentation, and that the name of) 72 604.33 P
-0.26 (GROUPE BULL not be used in advertising or publicity pertaining to distribution of the software without spe-) 72 592.33 P
0.54 (cific, written prior permission. GROUPE BULL makes no representations about the suitability of this soft-) 72 580.33 P
(ware for any purpose. It is provided) 72 568.33 T
1 F
(\322) 230.87 568.33 T
2 F
(as is) 235.31 568.33 T
1 F
(\323) 255.86 568.33 T
2 F
(without express or implied warranty.) 262.8 568.33 T
1 F
0.26 (GROUPE BULL disclaims all warranties with regard to this software, including all implied warranties of merchant-) 72 544.33 P
0.28 (ability and fitness, in no event shall GROUPE BULL be liable for any special, indirect or consequential damages or) 72 532.33 P
-0.58 (any damages whatsoever resulting from loss of use, data or profits, whether in an action of contract, negligence or other) 72 520.33 P
(tortious action, arising out of or in connection with the use or performance of this software.) 72 508.33 T
0 18 Q
(Acknowledgements) 72 479 T
1 10 Q
-0.53 (I want to thank my team partner and friend Colas Nahaboo who proposed me this project, and who actively participates) 72 450.33 P
-0.34 (to its design. I also want to thank all the users who help me to improve the library by giving feed back and sending bug) 72 438.33 P
(reports.) 72 426.33 T
1 14 Q
(Arnaud Le Hors) 449.08 405.67 T
1 10 Q
(KOALA Project \320 BULL Research c/o INRIA) 354.03 392.33 T
(2004 route des Lucioles \320 06565 Valbonne Cedex \320 FRANCE) 290.44 380.33 T
0 18 Q
(Support) 72 351 T
1 10 Q
1.06 (You can mail any question or suggestion relative to) 72 322.33 P
0 F
1.06 (XPM) 290.05 322.33 P
1 F
1.06 ( by electronic mail to) 312.81 322.33 P
3 F
2.55 (lehors@sophia.inria.fr) 405.57 322.33 P
1 F
1.06 (.) 537.5 322.33 P
-0.05 (There is also a mailing list, please mail requests to) 72 310.33 P
3 F
-0.12 (xpm-talk-request@sophia.inria.fr) 275.53 310.33 P
1 F
-0.05 ( to subscribe. You) 467.42 310.33 P
0.2 (can find the latest release by anonymous ftp on avahi.inria.fr \050138.96.24.30\051 or export.lcs.mit.edu \05018.30.0.238\051, and) 72 298.33 P
(also an archive of the mailing list on avahi.) 72 286.33 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
225 639 396 657 R
7 X
V
1 18 Q
0 X
(Table of Contents) 246.04 645 T
540 72 72 72 2 L
N
1 12 Q
(Chapter 1:) 72 568 T
(Introduction) 135 568 T
(.........................................................................................................) 197.89 568 T
(5) 525 568 T
(Chapter 2:) 72 544 T
(The XPM Format) 135 544 T
(................................................................................................) 224.88 544 T
(6) 525 544 T
(Chapter 3:) 72 520 T
(The XPM Library) 135 520 T
(................................................................................................) 224.88 520 T
(9) 525 520 T
(3.1  The Basic Level Interface) 108 498 T
(.....................................................................................) 257.86 498 T
(9) 525 498 T
(3.1.1  The structures) 144 480 T
(.........................................................................................) 245.87 480 T
(9) 525 480 T
(3.1.2  Functions to deal with XPM files) 144 466 T
(..........................................................) 338.81 466 T
(11) 519.01 466 T
(3.1.3  Functions to deal with XPM data) 144 452 T
(..........................................................) 338.81 452 T
(14) 519.01 452 T
(3.1.4  Functions to deal with XPM files and data) 144 438 T
(............................................) 380.79 438 T
(16) 519.01 438 T
(3.1.5  Functions to deal with XPM buffers) 144 424 T
(......................................................) 350.81 424 T
(16) 519.01 424 T
(3.1.6  Functions to deal with XPM files and buffers) 144 410 T
(.......................................) 395.78 410 T
(18) 519.01 410 T
(3.1.7  Miscellaneous functions) 144 396 T
(........................................................................) 296.84 396 T
(19) 519.01 396 T
(3.2  The Advanced Level Interface) 108 374 T
(..............................................................................) 278.85 374 T
(20) 519.01 374 T
(3.2.1  The structures) 144 356 T
(.........................................................................................) 245.87 356 T
(21) 519.01 356 T
(3.2.2  Functions to deal with XPM files) 144 342 T
(..........................................................) 338.81 342 T
(22) 519.01 342 T
(3.2.3  Functions to deal with XPM data) 144 328 T
(..........................................................) 338.81 328 T
(23) 519.01 328 T
(3.2.4  Functions to deal with XPM buffers) 144 314 T
(......................................................) 350.81 314 T
(23) 519.01 314 T
(3.2.5  Functions to deal with X images) 144 300 T
(............................................................) 332.82 300 T
(24) 519.01 300 T
(3.2.6  Functions to deal with X pixmaps) 144 286 T
(.........................................................) 341.81 286 T
(25) 519.01 286 T
(3.2.7  Miscellaneous functions) 144 272 T
(........................................................................) 296.84 272 T
(26) 519.01 272 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "5" 4
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(5) 303.11 54.85 T
0 18 Q
(Chapter 1) 267.28 680.84 T
(Introduction) 257.02 644.84 T
1 10 Q
0.52 (First, Why another image format? We \050Koala team at Bull Research, France\051 felt that most images bundled with X) 72 586.18 P
0.57 (applications will be small "icons", and that since many applications are color-customizable, existing image formats) 72 574.18 P
-0.18 (such as gif, tiff, iff, etc... were intended for big images with well-defined colors and so weren\325t adapted to the task. So) 72 562.18 P
0 F
(XPM) 72 550.18 T
1 F
( was designed with these criterions in mind:) 94.76 550.18 T
(\245) 72 532.18 T
(be editable by hand \050under emacs, vi...\051. Although this sounds pretty weird today.) 86.4 532.18 T
(\245) 72 514.18 T
(be includable in C code. It is unreasonable to load 1000 pixmap files on each start of an application.) 86.4 514.18 T
(\245) 72 496.18 T
(be a portable, mailable ascii format.) 86.4 496.18 T
(\245) 72 478.18 T
(provide defaults for monochrome/color/grayscale renderings.) 86.4 478.18 T
(\245) 72 460.18 T
-0.01 (provide overriding of colors. This way if the user wants your application to be bluish instead of greenish, you can) 86.4 460.18 P
(use the SAME icon files.) 86.4 448.18 T
(\245) 72 430.18 T
(allow comments to be included in the file.) 86.4 430.18 T
(\245) 72 412.18 T
(compression must be managed apart of the format.) 86.4 412.18 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 5
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(6) 303 56.01 T
0 18 Q
(Chapter 2) 267.28 681 T
(The XPM Format) 237.05 645 T
1 10 Q
0.02 (The) 72 586.33 P
0 F
0.02 (XPM) 90.06 586.33 P
1 F
0.02 ( format presents a C syntax, in order to provide the ability to include) 112.81 586.33 P
0 F
0.02 (XPM) 389.26 586.33 P
1 F
0.02 ( files in C and C++ programs. It) 412.01 586.33 P
(is in fact an array of strings composed of six different sections as follows:) 72 574.33 T
(/* XPM */ static char*) 129.6 556.33 T
3 F
(<variable_name>) 222.6 556.33 T
1 F
([] = {) 312.55 556.33 T
(<Values>) 129.6 538.33 T
(<Colors>) 129.6 520.33 T
(<Pixels>) 129.6 502.33 T
(<Extensions>) 129.6 484.33 T
(};) 129.6 466.33 T
(The words are separated by a white space which can be composed of space and tabulation characters.) 72 442.33 T
-0.15 (The) 72 418.33 P
3 F
-0.36 (<Values>) 89.89 418.33 P
1 F
-0.15 ( section is a string containing four or six integers in base 10 that correspond to: the pixmap width and) 137.86 418.33 P
0.46 (height, the number of colors, the number of characters per pixel \050so there is no limit on the number of colors\051, and,) 72 406.33 P
(optionally the hotspot coordinates and the) 72 394.33 T
0 F
(XPMEXT) 241.9 394.33 T
1 F
( tag if there is any extension following the) 285.2 394.33 T
3 F
(<Pixels>) 456.48 394.33 T
1 F
( section.) 504.45 394.33 T
3 F
(<width> <height> <ncolors> <cpp> [<x_hotspot> <y_hotspot>] [XPMEXT]) 72 370.33 T
1 F
(The) 72 346.33 T
3 F
(Colors) 90.04 346.33 T
1 F
( section contains as many strings as there are colors, and each string is as follows:) 126.02 346.33 T
3 F
(<chars> {<key> <color>}+) 72 322.33 T
1 F
0.07 (Where) 72 298.33 P
3 F
0.18 (<chars>) 101.21 298.33 P
1 F
0.07 ( is the) 143.18 298.33 P
3 F
0.18 (<chars_per_pixel>) 169.78 298.33 P
1 F
0.07 ( length string \050not surrounded by anything\051 representing the pixels,) 271.73 298.33 P
3 F
-0.43 (<color>) 72 286.33 P
1 F
-0.18 ( is the specified color, and) 113.98 286.33 P
3 F
-0.43 (<key>) 220.32 286.33 P
1 F
-0.18 ( is a keyword describing in which context this color should be used. Cur-) 250.3 286.33 P
(rently the keys may have the following values:) 72 274.33 T
( m) 144 256.33 T
(for mono visual) 216 256.33 T
( s) 144 240.33 T
( for symbolic name) 216 240.33 T
( g4) 144 224.33 T
( for 4-level grayscale) 216 224.33 T
( g) 144 208.33 T
( for grayscale with more than 4 levels) 216 208.33 T
( c) 144 192.33 T
( for color visual) 216 192.33 T
0.14 (Colors can be specified by giving the colorname, a # followed by the RGB code in hexadecimal, or a % followed by) 72 168.33 P
-0.35 (the HSV code \050not implemented\051. The symbolic name provides the ability of specifying the colors at load time and not) 72 156.33 P
0.05 (to hard-code them in the file. Also the string) 72 144.33 P
0 F
0.05 (None) 252.29 144.33 P
1 F
0.05 ( can be given as a colorname to mean \322transparent\323. Transparency) 274.5 144.33 P
(is handled by providing a masking bitmap in addition to the pixmap.) 72 132.33 T
1.18 (The) 72 108.33 P
3 F
2.82 (<Pixels>) 91.22 108.33 P
1 F
1.18 ( section is composed by) 139.19 108.33 P
3 F
2.82 (<height>) 243.07 108.33 P
1 F
1.18 ( strings of) 291.04 108.33 P
3 F
2.82 (<width>) 337.05 108.33 P
1 F
1.18 ( *) 379.03 108.33 P
3 F
2.82 (<chars_per_pixel>) 391.37 108.33 P
1 F
1.18 ( characters,) 493.32 108.33 P
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 6
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(7) 303.11 54.85 T
1 10 Q
0.2 (where every) 72 686.18 P
3 F
0.48 (<chars_per_pixel>) 124.01 686.18 P
1 F
0.2 ( length string must be one of the previously defined groups in the) 225.96 686.18 P
3 F
0.48 (<Colors>) 492.03 686.18 P
1 F
(section.) 72 674.18 T
0.18 (Then follows the) 72 650.18 P
3 F
0.43 (<Extensions>) 142.76 650.18 P
1 F
0.18 ( section which must be labeled, if not empty, in the) 214.72 650.18 P
3 F
0.43 (<Values>) 423.49 650.18 P
1 F
0.18 ( section as previ-) 471.46 650.18 P
(ously described. This section may be composed by several) 72 638.18 T
3 F
(<Extension>) 308.5 638.18 T
1 F
( subsections which may be of two types:) 374.46 638.18 T
(\245) 72 620.18 T
(one stand alone string composed as follows:) 86.4 620.18 T
3 F
(XPMEXT <extension-name> <extension-data>) 86.4 604.18 T
1 F
(\245) 72 586.18 T
(or a block composed by several strings:) 86.4 586.18 T
3 F
(XPMEXT <extension-name>) 86.4 570.18 T
(<related extension-data composed of several strings>) 86.4 554.18 T
1 F
(Finally, if not empty, this section must end by the following string:) 72 530.18 T
3 F
(XPMENDEXT) 72 506.18 T
1 F
-0.28 (To avoid possible conflicts with extension names in shared files, they should be prefixed by the name of the company.) 72 482.18 P
(This would ensure unicity.) 72 470.18 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 7
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(8) 303 56.01 T
1 10 Q
-0.11 (Below is an example which is the XPM file of a plaid pixmap. This is a 22x22 pixmap, with 4 colors and 2 characters) 72 686.33 P
-0.12 (per pixel. The hotspot coordinates are \0500, 0\051. There are symbols and default colors for color and monochrome visuals.) 72 674.33 P
(Finally there are two extensions.) 72 662.33 T
3 F
(/* XPM */) 72 620.33 T
(static char * plaid[] = {) 72 608.33 T
(/* plaid pixmap) 72 596.33 T
( * width height ncolors chars_per_pixel */) 72 584.33 T
("22 22 4 2 0 0 XPMEXT",) 72 572.33 T
(/* colors */) 72 560.33 T
("   c red) 72 548.33 T
(   m white  s light_color ",) 131.97 548.33 T
("Y  c green) 72 536.33 T
(  m black  s lines_in_mix ",) 137.96 536.33 T
("+  c yellow) 72 524.33 T
( m white  s lines_in_dark ",) 143.96 524.33 T
("x) 72 512.33 T
( m black  s dark_color ",) 144 512.33 T
(/* pixels */) 72 500.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 488.33 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 476.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 464.33 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 452.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 440.33 T
("Y Y Y Y Y x Y Y Y Y Y + x + x + x + x + x + ",) 72 428.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 416.33 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 404.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 392.33 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 380.33 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 368.33 T
("          x           x   x   x Y x   x   x ",) 72 356.33 T
("          x             x   x   Y   x   x   ",) 72 344.33 T
("          x           x   x   x Y x   x   x ",) 72 332.33 T
("          x             x   x   Y   x   x   ",) 72 320.33 T
("          x           x   x   x Y x   x   x ",) 72 308.33 T
("x x x x x x x x x x x x x x x x x x x x x x ",) 72 296.33 T
("          x           x   x   x Y x   x   x ",) 72 284.33 T
("          x             x   x   Y   x   x   ",) 72 272.33 T
("          x           x   x   x Y x   x   x ",) 72 260.33 T
("          x             x   x   Y   x   x   ",) 72 248.33 T
("          x           x   x   x Y x   x   x ") 72 236.33 T
("XPMEXT ext1 data1",) 72 224.33 T
("XPMEXT ext2",) 72 212.33 T
("data2_1",) 72 200.33 T
("data2_2",) 72 188.33 T
("XPMENDEXT") 72 176.33 T
(};) 72 164.33 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 8
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(9) 303.11 54.85 T
0 18 Q
(Chapter 3) 267.28 680.84 T
(The XPM Library) 235.54 644.84 T
1 10 Q
-0.33 (The XPM library basically provides two sets of Xlib-level functions in the C language. Most people should only know) 72 586.18 P
0.25 (about the first one since it provides what most likely one need with a simple interface. The second set, which stands) 72 574.18 P
0.43 (as a lower level called from the first one, is designed to be used from within applications which have more specific) 72 562.18 P
(needs such as a pixmap editor or applications which needs to cache data such as Xpm files.) 72 550.18 T
0 14 Q
(3.1) 72 495.51 T
(The Basic Level Interface) 100.8 495.51 T
1 10 Q
0.06 (The basic level interface allows to deal with XImage, Pixmap, XPM file, data \050included XPM file\051, buffer \050XPM file) 72 470.18 P
(in memory\051, and in many ways.) 72 458.18 T
(The following subsections describe these functions and how to use them.) 72 434.18 T
0 12 Q
(3.1.1) 72 390.84 T
(The structures) 108 390.84 T
1 10 Q
-0.22 (To provide a simple interface all the functions take, in addition to their main arguments such as a filename, a structure) 72 366.18 P
-0.43 (called) 72 354.18 P
0 F
-0.43 (XpmAttributes) 97.94 354.18 P
1 F
-0.43 (. This structure is composed of attributes to pass data such as colormap and visual and attributes) 162.9 354.18 P
(to retrieve returned data such as pixmap\325s width and height. The) 72 342.18 T
0 F
(XpmAttributes) 331.81 342.18 T
1 F
( structure is defined as follows:) 396.76 342.18 T
(typedef struct {) 72 324.18 T
(unsigned long valuemask;) 144 308.18 T
(/* Specifies which attributes are defined */) 288 308.18 T
(Visual *visual;) 144 292.18 T
(/* Specifies the visual to use */) 288 292.18 T
(Colormap colormap;) 144 276.18 T
(/* Specifies the colormap to use */) 288 276.18 T
(unsigned int depth;) 144 260.18 T
(/* Specifies the depth */) 288 260.18 T
(unsigned int width;) 144 244.18 T
(/* Returns the width of the created pixmap */) 288 244.18 T
(unsigned int height;) 144 228.18 T
(/* Returns the height of the created pixmap */) 288 228.18 T
(unsigned int x_hotspot;) 144 212.18 T
(/* Returns the x hotspot\325s coordinate */) 288 212.18 T
(unsigned int y_hotspot;) 144 196.18 T
(/* Returns the y hotspot\325s coordinate */) 288 196.18 T
(unsigned int cpp;) 144 180.18 T
(/* Specifies the number of char per pixel */) 288 180.18 T
(Pixel *pixels;) 144 164.18 T
(/* List of used color pixels */) 288 164.18 T
(unsigned int npixels;) 144 148.18 T
(/* Number of pixels */) 288 148.18 T
(XpmColorSymbol *colorsymbols;) 144 132.18 T
(/* Array of color symbols to override */) 288 132.18 T
(unsigned int numsymbols;) 144 116.18 T
(/* Number of symbols */) 288 116.18 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 9
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(10) 300 56.01 T
1 10 Q
(char *rgb_fname;) 144 686.33 T
(/* RGB text file name */) 288 686.33 T
(unsigned int nextensions;) 144 670.33 T
(/* Number of extensions */) 288 670.33 T
(XpmExtension *extensions;) 144 654.33 T
(/* Array of extensions */) 288 654.33 T
( /* Color Allocation Directives */) 72 638.33 T
(unsigned int exactColors;) 144 622.33 T
(/* Only use exact colors for visual */) 288 622.33 T
(unsigned int closeness;) 144 606.33 T
(/* Allowable RGB deviation */) 288 606.33 T
(unsigned int red_closeness;) 144 590.33 T
(/* Allowable red deviation */) 288 590.33 T
(unsigned int green_closeness;) 144 574.33 T
(/* Allowable green deviation */) 288 574.33 T
(unsigned int blue_closeness;) 144 558.33 T
(/* Allowable blue deviation */) 288 558.33 T
(int color_key;) 144 542.33 T
(/* Use colors from this color set */) 288 542.33 T
(} XpmAttributes;) 72 526.33 T
0.03 (The valuemask is the bitwise inclusive OR of the valid attribute mask bits. If the valuemask is zero, the attributes are) 72 502.33 P
-0.41 (ignored and not referenced. And default values are taken for needed attributes which are not specified. This valuemask) 72 490.33 P
0.01 (had to be part of the structure to let) 72 478.33 P
0 F
0.01 (Xpm) 215.06 478.33 P
1 F
0.01 ( functions modify its value when returning possible data such as hotspot co-) 236.16 478.33 P
(ordinates.) 72 466.33 T
0 F
0.19 (NOTE) 72 442.33 P
1 F
0.19 (: In any case this valuemask must be set to some valid value, at least zero, otherwise unpredictable errors can) 100.32 442.33 P
(occur.) 72 430.33 T
(To allow overriding of colors at load time the) 72 398.33 T
0 F
(XPM) 256.6 398.33 T
1 F
( library defines the) 279.36 398.33 T
0 F
(XpmColorSymbol) 357.07 398.33 T
1 F
( structure which contains:) 434.81 398.33 T
(typedef struct {) 72 380.33 T
( char *name;) 144 364.33 T
(/* Symbolic color name */) 288 364.33 T
( char *value;) 144 348.33 T
(/* Color value */) 288 348.33 T
( Pixel pixel;) 144 332.33 T
(/* Color pixel */) 288 332.33 T
(} XpmColorSymbol;) 72 316.33 T
0 (So, to override default colors at load time, you just have to pass, via the) 72 292.33 P
0 F
0 (XpmAttributes) 360.68 292.33 P
1 F
0 ( structure, a list of) 425.64 292.33 P
0 F
0 (XpmCol-) 500.58 292.33 P
-0.11 (orSymbol) 72 280.33 P
1 F
-0.11 ( elements containing the desired colors to the) 113.65 280.33 P
0 F
-0.11 (XpmReadFileToPixmap) 295.95 280.33 P
1 F
-0.11 ( or) 399.78 280.33 P
0 F
-0.11 (XpmCreatePixmapFromData) 412.88 280.33 P
-0.15 (XPM) 72 268.33 P
1 F
-0.15 ( functions. These colors can be specified by giving the color name in the value member or directly by giving the) 94.76 268.33 P
-0.4 (corresponding pixel in the pixel member. In the latter case the value member must be set to) 72 256.33 P
0 F
-0.4 (NULL) 432.67 256.33 P
1 F
-0.4 ( otherwise the given) 460.43 256.33 P
(pixel will not be considered.) 72 244.33 T
-0.28 (In addition, it is possible to set the pixel for a specific color) 72 220.33 P
0 F
-0.28 (value) 308.22 220.33 P
1 F
-0.28 (at load time by setting the color name to NULL, and) 333.21 220.33 P
0.32 (setting the value and pixel fields appropriately. For example, by setting the color name to NULL, the value to \322red\323) 72 208.33 P
0.07 (and the pixel to 51, all symbolic colors that are assigned to \322red\323 will be set to pixel 51. It is even possible to specify) 72 196.33 P
(the pixel used for the transparent color \322none\323 when no mask is required.) 72 184.33 T
(To pass and retrieve extension data use the) 72 160.33 T
0 F
(XpmExtension) 245.76 160.33 T
1 F
( structure which is defined below:) 309.06 160.33 T
(typedef struct {) 72 142.33 T
( char *name;) 144 126.33 T
(/* name of the extension */) 288 126.33 T
( unsigned int nlines;) 144 110.33 T
(/* number of lines in this extension */) 288 110.33 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 10
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(1) 300.45 54.85 T
(1) 305.78 54.85 T
1 10 Q
( char **lines;) 144 686.18 T
(/* pointer to the extension array of strings */) 288 686.18 T
(} XpmExtension;) 72 670.18 T
-0.14 (To retrieve possible extension data stored in an) 72 646.18 P
0 F
-0.14 (XPM) 261.85 646.18 P
1 F
-0.14 ( file or data, you must set the mask bits) 284.61 646.18 P
0 F
-0.14 (XpmReturnExtensions) 442.27 646.18 P
1 F
0.18 (to the valuemask of an) 72 634.18 P
0 F
0.18 (XpmAttributes) 165.87 634.18 P
1 F
0.18 ( structure that you pass to the read function you use. Then the same structure) 230.82 634.18 P
(may be passed the same way to any write function if you set the mask bits) 72 622.18 T
0 F
(XpmExtensions) 370.69 622.18 T
1 F
( to the valuemask.) 437.88 622.18 T
0 12 Q
(3.1.2) 72 578.84 T
(Functions to deal with XPM files) 108 578.84 T
1 10 Q
(To create an) 72 558.18 T
0 F
(XImage) 123.89 558.18 T
1 F
( from an) 157.75 558.18 T
0 F
(XPM) 194.11 558.18 T
1 F
( file, use) 216.87 558.18 T
0 F
(XpmReadFileToImage) 253.51 558.18 T
1 F
(.) 351.23 558.18 T
(int XpmReadFileToImage\050) 72 540.18 T
4 F
(display, filename, image_return, shapeimage_return, attributes) 180.54 540.18 T
1 F
(\051) 434.28 540.18 T
(Display) 108 528.18 T
4 F
(*display;) 141.59 528.18 T
1 F
(char) 108 516.18 T
4 F
(*filename;) 127.7 516.18 T
1 F
(XImage) 108 504.18 T
4 F
(**image_return;) 142.69 504.18 T
1 F
(XImage) 108 492.18 T
4 F
(**shapeimage_return;) 142.69 492.18 T
1 F
(XpmAttributes) 108 480.18 T
4 F
(*attributes;) 170.47 480.18 T
(display) 72 464.18 T
1 F
(Specifies the connection to the X server.) 171 464.18 T
4 F
(filename) 72 448.18 T
1 F
(Specifies the file name to use.) 171 448.18 T
4 F
(image_return) 72 432.18 T
1 F
(Returns the image which is created.) 171 432.18 T
4 F
(shapeimage_return) 72 416.18 T
1 F
(Returns the shape mask image which is created if the color None is used.) 171 416.18 T
4 F
(attributes) 72 400.18 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 400.18 T
0.47 (The) 72 376.18 P
0 F
0.47 (XpmReadFileToImage) 90.51 376.18 P
1 F
0.47 ( function reads in a file in the) 188.22 376.18 P
0 F
0.47 (XPM) 311.88 376.18 P
1 F
0.47 ( format. If the file cannot be opened it returns) 334.64 376.18 P
0 F
0.47 (Xp-) 523.9 376.18 P
0.17 (mOpenFailed) 72 364.18 P
1 F
0.17 (. If the file can be opened but does not contain valid) 130.31 364.18 P
0 F
0.17 (XPM) 342.45 364.18 P
1 F
0.17 (data, it returns) 367.87 364.18 P
0 F
0.17 (XpmFileInvalid) 428.33 364.18 P
1 F
0.17 (. If insuffi-) 496.09 364.18 P
(cient working storage is allocated, it returns) 72 352.18 T
0 F
(XpmNoMemory) 249.65 352.18 T
1 F
(.) 319.59 352.18 T
1.21 (If the passed) 72 328.18 P
0 F
1.21 (XpmAttributes) 128.63 328.18 P
1 F
1.21 ( structure pointer is not) 193.59 328.18 P
0 F
1.21 (NULL) 294.84 328.18 P
1 F
1.21 (,) 322.61 328.18 P
0 F
1.21 (XpmReadFileToImage) 328.81 328.18 P
1 F
1.21 ( looks for the following at-) 426.53 328.18 P
0.11 (tributes:) 72 316.18 P
0 F
0.11 (XpmVisual) 107.37 316.18 P
1 F
0.11 (,) 155.68 316.18 P
0 F
0.11 (XpmColormap) 160.79 316.18 P
1 F
0.11 (,) 225.2 316.18 P
0 F
0.11 (XpmDepth) 230.3 316.18 P
1 F
0.11 (,) 277.5 316.18 P
0 F
0.11 (XpmColorSymbols) 282.6 316.18 P
1 F
0.11 (,) 364.23 316.18 P
0 F
0.11 (XpmExactColors) 369.33 316.18 P
1 F
0.11 (,) 443.17 316.18 P
0 F
0.11 (XpmCloseness) 448.28 316.18 P
1 F
0.11 (,) 510.47 316.18 P
0 F
0.11 (Xpm-) 515.57 316.18 P
0.35 (RGBCloseness, XpmReturnPixels) 72 304.18 P
1 F
0.35 (,) 216.71 304.18 P
0 F
0.35 (XpmReturnExtensions) 222.07 304.18 P
1 F
0.35 (, and sets the) 319.79 304.18 P
0 F
0.35 (XpmSize) 375.34 304.18 P
1 F
0.35 ( and possibly the) 413.65 304.18 P
0 F
0.35 (XpmHotspot) 485.03 304.18 P
1 F
-0.25 (attributes when returning. In any case the valuemask of the passed) 72 292.18 P
0 F
-0.25 (XpmAttributes) 336.84 292.18 P
1 F
-0.25 ( must be set to some valid value, at) 401.79 292.18 P
(least zero, otherwise unpredictable errors can occur.) 72 280.18 T
0 F
0.78 (XpmReadFileToImage) 72 256.18 P
1 F
0.78 ( allocates colors, as read from the file or possibly overridden as specified in the) 169.72 256.18 P
0 F
0.78 (XpmCol-) 500.58 256.18 P
0.05 (orSymbols) 72 244.18 P
1 F
0.05 ( attributes. The colors are allocated using the color settings for the visual specified by the) 117.54 244.18 P
0 F
0.05 (XpmColorKey) 477.26 244.18 P
1 F
0.07 (attribute, which has the value) 72 232.18 P
0 F
0.07 (XPM_MONO, XPM_GRAY4, XPM_GRAY,) 192.26 232.18 P
1 F
0.07 (or) 386.77 232.18 P
0 F
0.07 ( XPM_COLOR) 395.1 232.18 P
1 F
0.07 (. If the) 462.07 232.18 P
0 F
0.07 (XpmColor-) 491.15 232.18 P
(Key) 72 220.18 T
1 F
( attribute is not set it is determined by examining the type of visual.) 89.21 220.18 T
-0.15 (If no default value exists for the specified visual, it first looks for other defaults nearer to the monochrome visual type) 72 196.18 P
0.48 (and secondly nearer to the color visual type. If the color which is found is not valid \050cannot be parsed\051, it looks for) 72 184.18 P
(another default one according to the same algorithm.) 72 172.18 T
-0.28 (If allocating a color fails, and the) 72 148.18 P
0 F
-0.28 (closeness) 204.95 148.18 P
1 F
-0.28 ( attribute is set, it tries to find a color already in the colormap that is closest) 243.26 148.18 P
0.12 (to the desired color, and uses that. If no color can be found that is within) 72 136.18 P
0 F
0.12 (closeness) 365.95 136.18 P
1 F
0.12 (of the Red, Green and Blue com-) 406.88 136.18 P
-0.61 (ponents of the desired color, it reverts to trying other default values as explained above. For finer control over the close-) 72 124.18 P
0.77 (ness requirements of a particular icon, the) 72 112.18 P
0 F
0.77 (red_closeness) 247.28 112.18 P
1 F
0.77 (,) 305.02 112.18 P
0 F
0.77 (green_closeness) 314.06 112.18 P
1 F
0.77 (, and) 381.23 112.18 P
0 F
0.77 (blue_closeness) 404.7 112.18 P
1 F
0.77 ( attributes may be) 466.34 112.18 P
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 11
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(12) 300 56.01 T
1 10 Q
(used instead of the more general) 72 686.33 T
0 F
(closeness) 204.12 686.33 T
1 F
( attribute.) 242.43 686.33 T
0.54 (The RGB components are integers within the range 0 \050black\051 to 65535 \050white\051. A closeness of less than 10000, for) 72 662.33 P
-0.03 (example, will cause only quite close colors to be matched, while a closeness of more than 50000 will allow quite dis-) 72 650.33 P
-0.39 (similar colors to match. Specifying a closeness of more than 65535 will allow any color to match, thus forcing the icon) 72 638.33 P
-0.04 (to be drawn in color no matter how bad the colormap is. The value 40000 seems to be about right for many situations) 72 626.33 P
-0.03 (requiring reasonable but not perfect matches. With this setting the color must only be within the same general area of) 72 614.33 P
(the RGB cube as the desired color.) 72 602.33 T
0.13 (If the) 72 578.33 P
0 F
0.13 (exactColors) 96.13 578.33 P
1 F
0.13 ( attribute is set it then returns) 146.64 578.33 P
0 F
0.13 (XpmColorError) 266.66 578.33 P
1 F
0.13 (, otherwise it creates the images and returns) 337.16 578.33 P
0 F
0.13 (Xpm-) 515.57 578.33 P
-0.11 (Success) 72 566.33 P
1 F
-0.11 (. If no color is found, and no close color exists or is wanted, and all visuals have been exhausted,) 104.2 566.33 P
0 F
-0.11 (XpmColor-) 491.15 566.33 P
(Failed) 72 554.33 T
1 F
( is returned.) 98.65 554.33 T
0 F
0.12 (XpmReadFileToImage) 72 530.33 P
1 F
0.12 ( returns the created image to image_return if not) 169.72 530.33 P
0 F
0.12 (NULL) 366.47 530.33 P
1 F
0.12 ( and possibly the created shapemask) 394.23 530.33 P
-0.05 (to shapeimage_return if not) 72 518.33 P
0 F
-0.05 (NULL) 184.51 518.33 P
1 F
-0.05 ( and the color) 212.27 518.33 P
0 F
-0.05 (None) 269.27 518.33 P
1 F
-0.05 ( is used. If required it stores into the) 291.48 518.33 P
0 F
-0.05 (XpmAttributes) 437.62 518.33 P
1 F
-0.05 ( structure) 502.58 518.33 P
(the list of the used pixels.) 72 506.33 T
-0.31 (When finished the caller must free the images using) 72 482.33 P
0 F
-0.31 (XDestroyImage) 279.32 482.33 P
1 F
-0.31 (, the colors using) 346.48 482.33 P
0 F
-0.31 (XFreeColors) 416.02 482.33 P
1 F
-0.31 (, and possibly the) 470.97 482.33 P
(data returned into the) 72 470.33 T
0 F
(XpmAttributes) 159.71 470.33 T
1 F
( using) 224.67 470.33 T
0 F
(XpmFreeAttributes) 251.32 470.33 T
1 F
(.) 335.7 470.33 T
-0.39 (In addition on systems which support such features) 72 446.33 P
0 F
-0.39 (XpmReadFileToImage) 275.97 446.33 P
1 F
-0.39 (deals with compressed files by forking an) 375.79 446.33 P
0 F
0.12 (uncompress) 72 434.33 P
1 F
0.12 ( or) 123.08 434.33 P
0 F
0.12 (gzip) 136.64 434.33 P
1 F
0.12 ( process and reading from the piped result. It assumes that the specified file is compressed if the) 154.41 434.33 P
0.2 (given file name ends by \325.Z\325 or \325.gz\325. In case the file name does not end so,) 72 422.33 P
0 F
0.2 (XpmReadFileToImage) 377.64 422.33 P
1 F
0.2 ( first looks for a) 475.36 422.33 P
-0.31 (file of which the name is the given one followed by \325.Z\325 or \325.gz\325; then if such a file does not exist, it looks for the given) 72 410.33 P
0.15 (file \050assumed as not compressed\051. And if instead of a file name) 72 398.33 P
0 F
0.15 (NULL) 328.37 398.33 P
1 F
0.15 ( is passed to) 356.14 398.33 P
0 F
0.15 (XpmReadFileToImage) 407.83 398.33 P
1 F
0.15 (, it reads) 505.55 398.33 P
(from the standard input.) 72 386.33 T
(To create a) 72 354.33 T
0 F
(Pixmap) 118.89 354.33 T
1 F
( from an) 151.66 354.33 T
0 F
(XPM) 188.02 354.33 T
1 F
( file, use) 210.77 354.33 T
0 F
(XpmReadFileToPixmap) 247.41 354.33 T
1 F
(.) 351.25 354.33 T
(int XpmReadFileToPixmap\050) 72 336.33 T
4 F
(display, d, filename, pixmap_return, shapemask_return, attributes) 186.11 336.33 T
1 F
(\051) 450.95 336.33 T
(Display) 108 324.33 T
4 F
(*display;) 141.59 324.33 T
1 F
(Drawable) 108 312.33 T
4 F
(d;) 149.35 312.33 T
1 F
(char) 108 300.33 T
4 F
(*filename;) 127.7 300.33 T
1 F
(Pixmap) 108 288.33 T
4 F
(*pixmap_return;) 141.04 288.33 T
1 F
(Pixmap) 108 276.33 T
4 F
(*shapemask_return;) 141.04 276.33 T
1 F
(XpmAttributes) 108 264.33 T
4 F
(*attributes;) 170.47 264.33 T
(display) 72 248.33 T
1 F
(Specifies the connection to the X server.) 171 248.33 T
4 F
(d) 72 232.33 T
1 F
(Specifies which screen the pixmap is created on.) 171 232.33 T
4 F
(filename) 72 216.33 T
1 F
(Specifies the file name to use.) 171 216.33 T
4 F
(pixmap_return) 72 200.33 T
1 F
(Returns the pixmap which is created.) 171 200.33 T
4 F
(shapemask_return) 72 184.33 T
1 F
(Returns the shapemask which is created if the color None is used.) 171 184.33 T
4 F
(attributes) 72 168.33 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 168.33 T
-0.19 (The) 72 144.33 P
0 F
-0.19 (XpmReadFileToPixmap) 89.85 144.33 P
1 F
-0.19 ( function creates X images using) 193.68 144.33 P
0 F
-0.19 (XpmReadFileToImage) 325.76 144.33 P
1 F
-0.19 ( and thus returns the same er-) 423.47 144.33 P
-0.56 (rors. In addition on success it then creates the related pixmaps, using) 72 132.33 P
0 F
-0.56 (XPutImage) 342.37 132.33 P
1 F
-0.56 (, which are returned to pixmap_return) 391.23 132.33 P
(and shapemask_return if not) 72 120.33 T
0 F
(NULL) 188.03 120.33 T
1 F
(, and finally destroys the created images using) 215.79 120.33 T
0 F
(XDestroyImage) 403.16 120.33 T
1 F
(.) 470.32 120.33 T
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 12
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(13) 300.12 54.85 T
1 10 Q
-0.17 (When finished the caller must free the pixmaps using) 72 686.18 P
0 F
-0.17 (XFreePixmap) 286.12 686.18 P
1 F
-0.17 (, the colors using) 345.51 686.18 P
0 F
-0.17 (XFreeColors) 415.61 686.18 P
1 F
-0.17 (, and possibly the) 470.56 686.18 P
(data returned into the) 72 674.18 T
0 F
(XpmAttributes) 159.71 674.18 T
1 F
( using) 224.67 674.18 T
0 F
(XpmFreeAttributes) 251.32 674.18 T
1 F
(.) 335.7 674.18 T
0 F
(XpmWriteFileFromImage) 74.5 642.18 T
1 F
( writes out an) 187.19 642.18 T
0 F
(XImage) 243.82 642.18 T
1 F
( to an) 277.68 642.18 T
0 F
(XPM) 302.38 642.18 T
1 F
( file.) 325.14 642.18 T
(int XpmWriteFileFromImage\050) 72 624.18 T
4 F
(display, filename, image, shapeimage, attributes) 193.31 624.18 T
1 F
(\051) 387.09 624.18 T
(Display) 108 612.18 T
4 F
(*display;) 141.59 612.18 T
1 F
(char) 108 600.18 T
4 F
(*filename;) 127.7 600.18 T
1 F
(XImage) 108 588.18 T
4 F
(*image;) 142.69 588.18 T
1 F
(XImage) 108 576.18 T
4 F
(*shapeimage;) 142.69 576.18 T
1 F
(XpmAttributes) 108 564.18 T
4 F
(*attributes;) 170.47 564.18 T
(display) 72 548.18 T
1 F
(Specifies the connection to the X server.) 171 548.18 T
4 F
(filename) 72 532.18 T
1 F
(Specifies the file name to use.) 171 532.18 T
4 F
(image) 72 516.18 T
1 F
(Specifies the image.) 171 516.18 T
4 F
(shapeimage) 72 500.18 T
1 F
(Specifies the shape mask image.) 171 500.18 T
4 F
(attributes) 72 484.18 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 484.18 T
-0.49 (The) 72 460.18 P
0 F
-0.49 (XpmWriteFileFromImage) 89.55 460.18 P
1 F
-0.49 ( function writes an image and its possible shapeimage out to a file in the) 202.24 460.18 P
0 F
-0.49 (XPM) 486.09 460.18 P
1 F
-0.49 ( format.) 508.85 460.18 P
0.1 (If the file cannot be opened, it returns) 72 448.18 P
0 F
0.1 (XpmOpenFailed) 225.71 448.18 P
1 F
0.1 (. If insufficient working storage is allocated, it returns) 296.8 448.18 P
0 F
0.1 (Xpm-) 515.57 448.18 P
(NoMemory) 72 436.18 T
1 F
(. If no error occurs then it returns) 120.84 436.18 T
0 F
(XpmSuccess) 256.01 436.18 T
1 F
(.) 309.31 436.18 T
0.14 (If the passed) 72 412.18 P
0 F
0.14 (XpmAttributes) 125.43 412.18 P
1 F
0.14 ( structure pointer is not) 190.38 412.18 P
0 F
0.14 (NULL) 286.29 412.18 P
1 F
0.14 (,) 314.05 412.18 P
0 F
0.14 (XpmWriteFileFromImage) 319.19 412.18 P
1 F
0.14 ( looks for the following at-) 431.88 412.18 P
(tributes:) 72 400.18 T
0 F
(XpmColormap) 107.26 400.18 T
1 F
(,) 171.66 400.18 T
0 F
(XpmSize) 176.66 400.18 T
1 F
(,) 214.97 400.18 T
0 F
(XpmHotspot) 219.97 400.18 T
1 F
(,) 274.94 400.18 T
0 F
(XpmCharsPerPixel) 279.94 400.18 T
1 F
(,) 363.21 400.18 T
0 F
(XpmRgbFilename) 368.21 400.18 T
1 F
(, and) 446.49 400.18 T
0 F
(XpmExtensions) 468.42 400.18 T
1 F
(.) 535.61 400.18 T
0.26 (If the) 72 376.18 P
0 F
0.26 (XpmSize) 96.39 376.18 P
1 F
0.26 ( attributes are not defined) 134.7 376.18 P
0 F
0.26 (XpmWriteFileFromImage) 240.64 376.18 P
1 F
0.26 (performs an) 356.08 376.18 P
0 F
0.26 (XGetGeometry) 407.11 376.18 P
1 F
0.26 ( operation. If the) 472.61 376.18 P
0.26 (filename contains an extension such as \322.xpm\323, in order to get a valid C variable name, the dot character is replaced) 72 364.18 P
-0.6 (by an underscore \325_\325 when writing out. Also if the) 72 352.18 P
0 F
-0.6 (XpmRgbFilename) 268.96 352.18 P
1 F
-0.6 (attribute is defined,) 349.15 352.18 P
0 F
-0.6 (XpmWriteFileFromImage) 427.31 352.18 P
1 F
(searches for color names in this file and if found writes them out instead of the rgb values.) 72 340.18 T
0.4 (In addition on systems which support such features if the given file name ends by \325.Z\325 or \325.gz\325 it is assumed to be a) 72 316.18 P
0.47 (compressed file. Then,) 72 304.18 P
0 F
0.47 (XpmWriteFileFromImage) 166.95 304.18 P
1 F
0.47 (writes to a piped) 282.6 304.18 P
0 F
0.47 (compress) 353.32 304.18 P
1 F
0.47 ( or) 393.29 304.18 P
0 F
0.47 (gzip) 407.55 304.18 P
1 F
0.47 ( process. And if instead of a) 425.32 304.18 P
(file name) 72 292.18 T
0 F
(NULL) 111.97 292.18 T
1 F
(is passed to) 142.23 292.18 T
0 F
(XpmWriteFileFromImage) 190.82 292.18 T
1 F
(, it writes to the standard output.) 303.5 292.18 T
(To write out a) 72 260.18 T
0 F
(Pixmap) 130.85 260.18 T
1 F
( to an) 163.61 260.18 T
0 F
(XPM) 188.32 260.18 T
1 F
( file, use) 211.07 260.18 T
0 F
(XpmWriteFileFromPixmap) 247.71 260.18 T
1 F
(.) 366.52 260.18 T
(int XpmWriteFileFromPixmap\050) 72 242.18 T
4 F
(display, filename, pixmap, shapemask, attributes) 198.88 242.18 T
1 F
(\051) 393.76 242.18 T
(Display) 108 230.18 T
4 F
(*display;) 141.59 230.18 T
1 F
(char) 108 218.18 T
4 F
(*filename;) 127.7 218.18 T
1 F
(Pixmap) 108 206.18 T
4 F
(pixmap;) 141.04 206.18 T
1 F
(Pixmap) 108 194.18 T
4 F
(shapemask;) 141.04 194.18 T
1 F
(XpmAttributes) 108 182.18 T
4 F
(*attributes;) 170.47 182.18 T
(display) 72 166.18 T
1 F
(Specifies the connection to the X server.) 171 166.18 T
4 F
(filename) 72 150.18 T
1 F
(Specifies the file name to use.) 171 150.18 T
4 F
(pixmap) 72 134.18 T
1 F
(Specifies the pixmap.) 171 134.18 T
4 F
(shapemask) 72 118.18 T
1 F
(Specifies the shape mask pixmap.) 171 118.18 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 13
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(14) 300 56.01 T
4 10 Q
(attributes) 72 686.33 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 686.33 T
1.15 (The) 72 662.33 P
0 F
1.15 (XpmWriteFileFromPixmap) 91.19 662.33 P
1 F
1.15 ( function uses) 209.99 662.33 P
0 F
1.15 (XGetImage) 271.46 662.33 P
1 F
1.15 ( to get from the given pixmaps the related X images) 320.86 662.33 P
0.69 (which are passed to) 72 650.33 P
0 F
0.69 (XpmWriteFileFromImage) 155.83 650.33 P
1 F
0.69 (. Finally) 268.52 650.33 P
0 F
0.69 (XpmWriteFileFromPixmap) 305.73 650.33 P
1 F
0.69 ( destroys the created images) 424.53 650.33 P
1.09 (using) 72 638.33 P
0 F
1.09 (XDestroyImage) 97.24 638.33 P
1 F
1.09 (. The) 164.4 638.33 P
0 F
1.09 (XpmWriteFileFromPixmap) 189.61 638.33 P
1 F
1.09 (function returns the same errors as) 312 638.33 P
0 F
1.09 (XpmWriteFileFro-) 458.95 638.33 P
(mImage) 72 626.33 T
1 F
(.) 106.97 626.33 T
0 12 Q
(3.1.3) 72 583 T
(Functions to deal with XPM data) 108 583 T
1 10 Q
0.18 (An) 72 562.33 P
0 F
0.18 (XPM) 86.89 562.33 P
1 F
0.18 ( data is an array of character strings which may be obtained by simply including an) 109.65 562.33 P
0 F
0.18 (XPM) 447.23 562.33 P
1 F
0.18 ( file into a C pro-) 469.99 562.33 P
(gram.) 72 550.33 T
(To create an) 72 518.33 T
0 F
(XImage) 123.89 518.33 T
1 F
( from an) 157.75 518.33 T
0 F
(XPM) 194.11 518.33 T
1 F
( data, use) 216.87 518.33 T
0 F
(XpmCreateImageFromData) 256.84 518.33 T
1 F
(.) 377.84 518.33 T
(int XpmCreateImageFromData\050) 72 500.33 T
4 F
(display, data, image_return, shapeimage_return, attributes) 199.96 500.33 T
1 F
(\051) 437.05 500.33 T
(Display) 108 488.33 T
4 F
(*display;) 141.59 488.33 T
1 F
(char) 108 476.33 T
4 F
(**data;) 127.7 476.33 T
1 F
(XImage) 108 464.33 T
4 F
(**image_return;) 142.69 464.33 T
1 F
(XImage) 108 452.33 T
4 F
(**shapeimage_return;) 142.69 452.33 T
1 F
(XpmAttributes) 108 440.33 T
4 F
(*attributes;) 170.47 440.33 T
(display) 72 424.33 T
1 F
(Specifies the connection to the X server.) 171 424.33 T
4 F
(data) 72 408.33 T
1 F
(Specifies the location of the data.) 171 408.33 T
4 F
(image_return) 72 392.33 T
1 F
(Returns the image which is created.) 171 392.33 T
4 F
(shapeimage_return) 72 376.33 T
1 F
(Returns the shape mask image which is created if the color None is used.) 171 376.33 T
4 F
(attributes) 72 360.33 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 360.33 T
-0.03 (The) 72 336.33 P
0 F
-0.03 (XpmCreateImageFromData) 90.01 336.33 P
1 F
-0.03 ( function allows you to include in your C program an) 211.01 336.33 P
0 F
-0.03 (XPM) 425.78 336.33 P
1 F
-0.03 ( file which was written) 448.54 336.33 P
(out by functions such as) 72 324.33 T
0 F
(XpmWriteFileFromImage) 171.11 324.33 T
1 F
( or) 283.79 324.33 T
0 F
(XpmWriteFileFromPixmap) 297.12 324.33 T
1 F
( without reading in the file.) 415.92 324.33 T
0 F
0.09 (XpmCreateImageFromData) 72 300.33 P
1 F
0.09 ( exactly works as) 193 300.33 P
0 F
0.09 (XpmReadFileToImage) 264.96 300.33 P
1 F
0.09 ( does and returns the same way. It just reads) 362.68 300.33 P
-0.29 (data instead of a file. Here again, it is the caller\325s responsibility to free the returned images, the colors and possibly the) 72 288.33 P
(data returned into the) 72 276.33 T
0 F
(XpmAttributes) 159.71 276.33 T
1 F
( structure.) 224.67 276.33 T
(To create a) 72 244.33 T
0 F
(Pixmap) 118.89 244.33 T
1 F
( from an) 151.66 244.33 T
0 F
(XPM) 188.02 244.33 T
1 F
( data, use) 210.77 244.33 T
0 F
(XpmCreatePixmapFromData.) 250.74 244.33 T
1 F
(int XpmCreatePixmapFromData\050) 72 220.33 T
4 F
(display, d, data, pixmap_return, shapemask_return, attributes) 205.53 220.33 T
1 F
(\051) 453.72 220.33 T
(Display) 108 202.33 T
4 F
(*display;) 141.59 202.33 T
1 F
(Drawable) 108 190.33 T
4 F
(d;) 149.35 190.33 T
1 F
(char) 108 178.33 T
4 F
(**data;) 127.7 178.33 T
1 F
(Pixmap) 108 166.33 T
4 F
(*pixmap_return;) 141.04 166.33 T
1 F
(Pixmap) 108 154.33 T
4 F
(*shapemask_return;) 141.04 154.33 T
1 F
(XpmAttributes) 108 142.33 T
4 F
(*attributes;) 170.47 142.33 T
(display) 72 126.33 T
1 F
(Specifies the connection to the X server.) 171 126.33 T
4 F
(d) 72 110.33 T
1 F
(Specifies which screen the pixmap is created on.) 171 110.33 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 14
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(15) 300.12 54.85 T
4 10 Q
(data) 72 686.18 T
1 F
(Specifies the location of the data.) 171 686.18 T
4 F
(pixmap_return) 72 670.18 T
1 F
(Returns the pixmap which is created.) 171 670.18 T
4 F
(shapemask_return) 72 654.18 T
1 F
(Returns the shape mask pixmap which is created if the color None is used.) 171 654.18 T
4 F
(attributes) 72 638.18 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 638.18 T
0.23 (The) 72 614.18 P
0 F
0.23 (XpmCreatePixmapFromData) 90.27 614.18 P
1 F
0.23 ( function creates X images using) 217.39 614.18 P
0 F
0.23 (XpmCreateImageFromData) 351.98 614.18 P
1 F
0.23 ( and thus returns) 472.98 614.18 P
0.36 (the same errors. In addition on success it then creates the related pixmaps, using) 72 602.18 P
0 F
0.36 (XPutImage) 399.52 602.18 P
1 F
0.36 (, which are returned to) 448.38 602.18 P
(pixmap_return and shapemask_return if not) 72 590.18 T
0 F
(NULL) 249.37 590.18 T
1 F
(, and finally destroys the created images using) 277.14 590.18 T
0 F
(XDestroyImage) 464.5 590.18 T
1 F
(.) 531.67 590.18 T
-0.43 (Do not forget to free the returned pixmaps, the colors, and possibly the data returned into the) 72 566.18 P
0 F
-0.43 (XpmAttributes) 438.01 566.18 P
1 F
-0.43 ( structure) 502.96 566.18 P
(when done.) 72 554.18 T
(In some cases, one may want to create an) 72 522.18 T
0 F
(XPM) 239.64 522.18 T
1 F
( data from an) 262.39 522.18 T
0 F
(XImage) 317.9 522.18 T
1 F
(, to do so use) 351.77 522.18 T
0 F
(XpmCreateDataFromImage) 406.74 522.18 T
1 F
(.) 527.74 522.18 T
(int XpmCreateDataFromImage\050) 72 504.18 T
4 F
(display, data_return, image, shapeimage, attributes) 199.96 504.18 T
1 F
(\051) 407.07 504.18 T
(Display) 108 492.18 T
4 F
(*display;) 141.59 492.18 T
1 F
(char) 108 480.18 T
4 F
(***data_return;) 127.7 480.18 T
1 F
(XImage) 108 468.18 T
4 F
(*image;) 142.69 468.18 T
1 F
(XImage) 108 456.18 T
4 F
(*shapeimage;) 142.69 456.18 T
1 F
(XpmAttributes) 108 444.18 T
4 F
(*attributes;) 170.47 444.18 T
(display) 72 428.18 T
1 F
(Specifies the connection to the X server.) 171 428.18 T
4 F
(data_return) 72 412.18 T
1 F
(Returns the data which is created.) 171 412.18 T
4 F
(image) 72 396.18 T
1 F
(Specifies the image.) 171 396.18 T
4 F
(shapeimage) 72 380.18 T
1 F
(Specifies the shape mask image.) 171 380.18 T
4 F
(attributes) 72 364.18 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 364.18 T
0.28 (The) 72 340.18 P
0 F
0.28 (XpmCreateDataFromImage) 90.32 340.18 P
1 F
0.28 ( function exactly works as) 211.32 340.18 P
0 F
0.28 (XpmWriteFileFromImage) 320.15 340.18 P
1 F
0.28 ( does and returns the same) 432.84 340.18 P
0.14 (way. It just writes to a single block malloc\325ed data instead of to a file. It is the caller\325s responsibility to free the data,) 72 328.18 P
(using) 72 316.18 T
0 F
(XpmFree) 96.16 316.18 T
1 F
( when finished.) 136.67 316.18 T
0 F
(XpmCreateDataFromPixmap) 72 284.18 T
1 F
( creates an) 199.12 284.18 T
0 F
(XPM) 243.8 284.18 T
1 F
( data from a) 266.55 284.18 T
0 F
(Pixmap) 317.07 284.18 T
1 F
(.) 349.83 284.18 T
(int XpmCreateDataFromPixmap\050) 72 266.18 T
4 F
(display, data_return, pixmap, shapemask, attributes) 205.53 266.18 T
1 F
(\051) 413.74 266.18 T
(Display) 108 254.18 T
4 F
(*display;) 141.59 254.18 T
1 F
(char) 108 242.18 T
4 F
(***data_return;) 127.7 242.18 T
1 F
(Pixmap) 108 230.18 T
4 F
(pixmap;) 141.04 230.18 T
1 F
(Pixmap) 108 218.18 T
4 F
(shapemask;) 141.04 218.18 T
1 F
(XpmAttributes) 108 206.18 T
4 F
(*attributes;) 170.47 206.18 T
(display) 72 190.18 T
1 F
(Specifies the connection to the X server.) 171 190.18 T
4 F
(data_return) 72 174.18 T
1 F
(Returns the data which is created.) 171 174.18 T
4 F
(pixmap) 72 158.18 T
1 F
(Specifies the pixmap.) 171 158.18 T
4 F
(shapemask) 72 142.18 T
1 F
(Specifies the shape mask pixmap.) 171 142.18 T
4 F
(attributes) 72 126.18 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 126.18 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 15
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(16) 300 56.01 T
1 10 Q
0.56 (The) 72 686.33 P
0 F
0.56 (XpmCreateDataFromPixmap) 90.6 686.33 P
1 F
0.56 ( function uses) 217.72 686.33 P
0 F
0.56 (XGetImage) 277.4 686.33 P
1 F
0.56 ( to get from the given pixmaps the related X images) 326.8 686.33 P
-0.28 (which are passed to) 72 674.33 P
0 F
-0.28 (XpmCreateDataFromImage) 151.95 674.33 P
1 F
-0.28 (. Then it destroys the created images using) 272.95 674.33 P
0 F
-0.28 (XDestroyImage) 443.69 674.33 P
1 F
-0.28 (.) 510.85 674.33 P
0 F
-0.28 (Xpm-) 515.57 674.33 P
(CreateDataFromPixmap) 72 662.33 T
1 F
( returns the same errors as) 178.02 662.33 T
0 F
(XpmCreateDataFromImage) 285.15 662.33 T
1 F
(.) 406.16 662.33 T
0 12 Q
(3.1.4) 72 619 T
(Functions to deal with XPM files and data) 108 619 T
1 10 Q
0.5 (To directly tranform an) 72 598.33 P
0 F
0.5 (XPM) 170.04 598.33 P
1 F
0.5 ( file to and from an) 192.8 598.33 P
0 F
0.5 (XPM) 275.19 598.33 P
1 F
0.5 ( data array, without requiring an open X display, use) 297.94 598.33 P
0 F
0.5 (Xpm-) 515.57 598.33 P
(ReadFileToData) 72 586.33 T
1 F
( and) 142.51 586.33 T
0 F
(XpmWriteFileFromData) 161.94 586.33 T
1 F
(.) 268.52 586.33 T
0 F
(XpmReadFileToData) 72 554.33 T
1 F
( allocates and fills an) 163.61 554.33 T
0 F
(XPM) 250.49 554.33 T
1 F
( data array from an) 273.25 554.33 T
0 F
(XPM) 351.79 554.33 T
1 F
( file.) 374.54 554.33 T
(int XpmReadFileToData\050) 72 536.33 T
4 F
(filename, data_return) 174.43 536.33 T
1 F
(\051) 261.61 536.33 T
(char) 108 524.33 T
4 F
(*filename;) 127.7 524.33 T
1 F
(char) 108 512.33 T
4 F
(***data_return;) 127.7 512.33 T
(filename) 72 496.33 T
1 F
(Specifies the file name to read.) 171 496.33 T
4 F
(data_return) 72 480.33 T
1 F
(Returns the data array created.) 171 480.33 T
0 F
0.58 (XpmReadFileToData) 72 456.33 P
1 F
0.58 ( returns) 163.61 456.33 P
0 F
0.58 (XpmOpenFailed) 197.51 456.33 P
1 F
0.58 ( if it cannot open the file,) 268.6 456.33 P
0 F
0.58 (XpmNoMemory) 375.89 456.33 P
1 F
0.58 ( if insufficient working) 445.83 456.33 P
0.19 (storage is allocated,) 72 444.33 P
0 F
0.19 (XpmFileInvalid) 154.19 444.33 P
1 F
0.19 ( if this is not a valid) 221.94 444.33 P
0 F
0.19 (XPM) 305.21 444.33 P
1 F
0.19 ( file, and) 327.96 444.33 P
0 F
0.19 (XpmSuccess) 366.3 444.33 P
1 F
0.19 (otherwise. The allocated data) 422.29 444.33 P
(returned by) 72 432.33 T
0 F
(XpmReadFileToData) 120.29 432.33 T
1 F
( should be freed with) 211.9 432.33 T
0 F
(XpmFree) 298.79 432.33 T
1 F
( when done.) 339.3 432.33 T
0 F
(XpmWriteFileFromData) 72 400.33 T
1 F
( writes an) 178.58 400.33 T
0 F
(XPM) 219.94 400.33 T
1 F
( data array to an) 242.7 400.33 T
0 F
(XPM) 309.58 400.33 T
1 F
( file.) 332.34 400.33 T
(int XpmWriteFileFromData\050) 72 382.33 T
4 F
(filename, data) 187.21 382.33 T
1 F
(\051) 244.4 382.33 T
(char) 108 370.33 T
4 F
(*filename;) 127.7 370.33 T
1 F
(char) 108 358.33 T
4 F
(**data;) 127.7 358.33 T
(filename) 72 342.33 T
1 F
(Specifies the file name to write.) 171 342.33 T
4 F
(data) 72 326.33 T
1 F
(Specifies the data array to read.) 171 326.33 T
0 F
-0.19 (XpmReadFileToData) 72 302.33 P
1 F
-0.19 ( returns) 163.61 302.33 P
0 F
-0.19 (XpmOpenFailed) 195.97 302.33 P
1 F
-0.19 ( if it cannot open the file,) 267.05 302.33 P
0 F
-0.19 (XpmFileInvalid) 368.95 302.33 P
1 F
-0.19 ( if this is not a valid) 436.7 302.33 P
0 F
-0.19 (XPM) 517.24 302.33 P
1 F
(data, and) 72 290.33 T
0 F
(XpmSuccess) 110.58 290.33 T
1 F
( otherwise.) 163.88 290.33 T
0 12 Q
(3.1.5) 72 247 T
(Functions to deal with XPM buffers) 108 247 T
1 10 Q
0.52 (An) 72 226.33 P
0 F
0.52 (XPM) 87.23 226.33 P
1 F
0.52 ( buffer is a character string which may be obtained by simply making the exact copy of an) 109.99 226.33 P
0 F
0.52 (XPM) 482.34 226.33 P
1 F
0.52 ( file into) 505.1 226.33 P
(memory.) 72 214.33 T
(To create an) 72 182.33 T
0 F
(XImage) 123.89 182.33 T
1 F
( from an) 157.75 182.33 T
0 F
(XPM) 194.11 182.33 T
1 F
( buffer, use) 216.87 182.33 T
0 F
(XpmCreateImageFromBuffer) 264.6 182.33 T
1 F
(.) 392.82 182.33 T
(int XpmCreateImageFromBuffer\050) 72 164.33 T
4 F
(display, buffer, image_return, shapeimage_return, attributes) 207.18 164.33 T
1 F
(\051) 450.37 164.33 T
(Display) 108 152.33 T
4 F
(*display;) 141.59 152.33 T
1 F
(char) 108 140.33 T
4 F
(*buffer;) 127.7 140.33 T
1 F
(XImage) 108 128.33 T
4 F
(**image_return;) 142.69 128.33 T
1 F
(XImage) 108 116.33 T
4 F
(**shapeimage_return;) 142.69 116.33 T
1 F
(XpmAttributes) 108 104.33 T
4 F
(*attributes;) 170.47 104.33 T
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 16
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(17) 300.12 54.85 T
4 10 Q
(display) 72 686.18 T
1 F
(Specifies the connection to the X server.) 171 686.18 T
4 F
(buffer) 72 670.18 T
1 F
(Specifies the location of the buffer.) 171 670.18 T
4 F
(image_return) 72 654.18 T
1 F
(Returns the image which is created.) 171 654.18 T
4 F
(shapeimage_return) 72 638.18 T
1 F
(Returns the shape mask image which is created if the color None is used.) 171 638.18 T
4 F
(attributes) 72 622.18 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 622.18 T
-0.04 (The) 72 598.18 P
0 F
-0.04 (XpmCreateImageFromBuffer) 90 598.18 P
1 F
-0.04 ( works the same way as) 218.22 598.18 P
0 F
-0.04 (XpmReadFileToImage) 315.12 598.18 P
1 F
-0.04 (, it just parses the buffer instead) 412.84 598.18 P
0.23 (of the file. Be aware that the feature provided on some systems by) 72 586.18 P
0 F
0.23 (XpmReadFileToImage) 341.99 586.18 P
1 F
0.23 (to deal with compressed) 442.44 586.18 P
(files is not available here.) 72 574.18 T
(To create a) 72 542.18 T
0 F
(Pixmap) 118.89 542.18 T
1 F
( from an) 151.66 542.18 T
0 F
(XPM) 188.02 542.18 T
1 F
( buffer, use) 210.77 542.18 T
0 F
(XpmCreatePixmapFromBuffer) 258.51 542.18 T
1 F
(.) 392.84 542.18 T
(int XpmCreatePixmapFromBuffer\050) 72 524.18 T
4 F
(display, d, buffer, pixmap_return, shapemask_return, attributes) 212.74 524.18 T
1 F
(\051) 467.04 524.18 T
(Display) 108 512.18 T
4 F
(*display;) 141.59 512.18 T
1 F
(Drawable) 108 500.18 T
4 F
(d;) 149.35 500.18 T
1 F
(char) 108 488.18 T
4 F
(*buffer;) 127.7 488.18 T
1 F
(Pixmap) 108 476.18 T
4 F
(*pixmap_return;) 141.04 476.18 T
1 F
(Pixmap) 108 464.18 T
4 F
(*shapemask_return;) 141.04 464.18 T
1 F
(XpmAttributes) 108 452.18 T
4 F
(*attributes;) 170.47 452.18 T
(display) 72 436.18 T
1 F
(Specifies the connection to the X server.) 171 436.18 T
4 F
(d) 72 420.18 T
1 F
(Specifies which screen the pixmap is created on.) 171 420.18 T
4 F
(buffer) 72 404.18 T
1 F
(Specifies the location of the buffer.) 171 404.18 T
4 F
(pixmap_return) 72 388.18 T
1 F
(Returns the pixmap which is created if the color None.) 171 388.18 T
4 F
(shapemask_return) 72 372.18 T
1 F
(Returns the shape mask pixmap which is created if the color None is used.) 171 372.18 T
4 F
(attributes) 72 356.18 T
1 F
(Specifies the location of a structure to get and store information.) 171 356.18 T
0.3 (The) 72 332.18 P
0 F
0.3 (XpmCreatePixmapFromBuffer) 90.34 332.18 P
1 F
0.3 ( function works the same way as) 224.68 332.18 P
0 F
0.3 (XpmReadFileToPixmap) 359.73 332.18 P
1 F
0.3 (, it just calls) 463.56 332.18 P
0 F
0.3 (Xpm-) 515.57 332.18 P
(CreateImageFromBuffer) 72 320.18 T
1 F
( instead of) 179.12 320.18 T
0 F
(XpmReadFileToImage) 223.26 320.18 T
1 F
(.) 320.97 320.18 T
(To create an) 72 288.18 T
0 F
(XPM) 123.89 288.18 T
1 F
( buffer from an) 146.65 288.18 T
0 F
(XImage) 209.92 288.18 T
1 F
(, use) 243.79 288.18 T
0 F
(XpmCreateBufferFromImage) 264.6 288.18 T
1 F
(.) 392.82 288.18 T
(int XpmCreateBufferFromImage\050) 72 270.18 T
4 F
(display, buffer_return, image, shapeimage, attributes) 207.18 270.18 T
1 F
(\051) 420.39 270.18 T
(Display) 108 258.18 T
4 F
(*display;) 141.59 258.18 T
1 F
(char) 108 246.18 T
4 F
(**buffer_return;) 127.7 246.18 T
1 F
(XImage) 108 234.18 T
4 F
(*image;) 142.69 234.18 T
1 F
(XImage) 108 222.18 T
4 F
(*shapeimage;) 142.69 222.18 T
1 F
(XpmAttributes) 108 210.18 T
4 F
(*attributes;) 170.47 210.18 T
(display) 72 194.18 T
1 F
(Specifies the connection to the X server.) 171 194.18 T
4 F
(buffer_return) 72 178.18 T
1 F
(Returns the buffer which is created.) 171 178.18 T
4 F
(image) 72 162.18 T
1 F
(Specifies the image.) 171 162.18 T
4 F
(shapeimage) 72 146.18 T
1 F
(Specifies the shape mask image.) 171 146.18 T
4 F
(attributes) 72 130.18 T
1 F
(Specifies the location of a structure containing information \050or) 171 130.18 T
(NULL\051.) 423.32 130.18 T
-0.25 (The) 72 106.18 P
0 F
-0.25 (XpmCreateBufferFromImage) 89.79 106.18 P
1 F
-0.25 ( works as) 218.01 106.18 P
0 F
-0.25 (XpmWriteFileFromImage) 257.5 106.18 P
1 F
-0.25 (, it just writes to a malloc\325ed buffer instead) 370.19 106.18 P
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 17
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(18) 300 56.01 T
1 10 Q
(of to a file. The caller should free the buffer using) 72 686.33 T
0 F
(XpmFree) 274.06 686.33 T
1 F
( when finished.) 314.58 686.33 T
0 F
(XpmCreateBufferFromPixmap) 72 654.33 T
1 F
( creates an) 206.34 654.33 T
0 F
(XPM) 251.01 654.33 T
1 F
( buffer from a) 273.77 654.33 T
0 F
(Pixmap) 332.05 654.33 T
1 F
(.) 364.81 654.33 T
(int XpmCreateBufferFromPixmap\050) 72 636.33 T
4 F
(display, buffer_return, pixmap, shapemask, attributes) 212.74 636.33 T
1 F
(\051) 427.07 636.33 T
(Display) 108 624.33 T
4 F
(*display;) 141.59 624.33 T
1 F
(char) 108 612.33 T
4 F
(**buffer_return;) 127.7 612.33 T
1 F
(Pixmap) 108 600.33 T
4 F
(pixmap;) 141.04 600.33 T
1 F
(Pixmap) 108 588.33 T
4 F
(shapemask;) 141.04 588.33 T
1 F
(XpmAttributes) 108 576.33 T
4 F
(*attributes;) 170.47 576.33 T
(display) 72 560.33 T
1 F
(Specifies the connection to the X server.) 171 560.33 T
4 F
(buffer_return) 72 544.33 T
1 F
(Returns the buffer which is created.) 171 544.33 T
4 F
(pixmap) 72 528.33 T
1 F
(Specifies the pixmap.) 171 528.33 T
4 F
(shapemask) 72 512.33 T
1 F
(Specifies the shape mask pixmap.) 171 512.33 T
4 F
(attributes) 72 496.33 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 496.33 T
1.85 (The) 72 472.33 P
0 F
1.85 (XpmCreateBufferFromPixmap) 91.89 472.33 P
1 F
1.85 ( function works as) 226.23 472.33 P
0 F
1.85 (XpmWriteFileFromPixmap) 309.69 472.33 P
1 F
1.85 (, it just calls) 428.5 472.33 P
0 F
1.85 (XpmCreate-) 486.72 472.33 P
0.07 (BufferFromImage) 72 460.33 P
1 F
0.07 ( instead of) 150.27 460.33 P
0 F
0.07 (XpmWriteFileFromImage) 194.6 460.33 P
1 F
0.07 (. Once again, the caller should free the buffer using) 307.29 460.33 P
0 F
0.07 (Xpm-) 515.57 460.33 P
(Free) 72 448.33 T
1 F
( when finished.) 91.42 448.33 T
0 12 Q
(3.1.6) 72 405 T
(Functions to deal with XPM files and buffers) 108 405 T
1 10 Q
-0.41 (As a convenience, the) 72 384.33 P
0 F
-0.41 (XpmReadFileToBuffer) 160.58 384.33 P
1 F
-0.41 ( and) 259.41 384.33 P
0 F
-0.41 (XpmWriteFileFromBuffer) 278.03 384.33 P
1 F
-0.41 ( are provided to copy a file to a buffer) 391.83 384.33 P
0.15 (and to write a file from a buffer. Thus for instance one may decide to use) 72 372.33 P
0 F
0.15 (XpmReadFileToBuffer) 368.86 372.33 P
1 F
0.15 (,) 467.69 372.33 P
0 F
0.15 (XpmCreatePix-) 472.84 372.33 P
0.63 (mapFromBuffer) 72 360.33 P
1 F
0.63 (, and) 142.5 360.33 P
0 F
0.63 (XpmFree) 165.7 360.33 P
1 F
0.63 ( instead of) 206.21 360.33 P
0 F
0.63 (XpmReadFileToPixmap) 252.25 360.33 P
1 F
0.63 (. On some systems this may lead to a perfor-) 356.08 360.33 P
(mance improvement, since the parsing will be performed in memory, but it uses more memory.) 72 348.33 T
0 F
(XpmReadFileToBuffer) 72 316.33 T
1 F
( allocates and fills a buffer from a file.) 170.83 316.33 T
(int XpmReadFileToBuffer\050) 72 298.33 T
4 F
(filename, buffer_return) 181.65 298.33 T
1 F
(\051) 274.93 298.33 T
(char) 108 286.33 T
4 F
(*filename;) 127.7 286.33 T
1 F
(char) 108 274.33 T
4 F
(**buffer_return;) 127.7 274.33 T
(filename) 72 258.33 T
1 F
(Specifies the file name to read.) 171 258.33 T
4 F
(buffer_return) 72 242.33 T
1 F
(Returns the buffer created.) 171 242.33 T
0 F
0.44 (XpmReadFileToBuffer) 72 218.33 P
1 F
0.44 ( returns) 170.83 218.33 P
0 F
0.44 (XpmOpenFailed) 204.45 218.33 P
1 F
0.44 ( if it cannot open the file, returns) 275.53 218.33 P
0 F
0.44 (XpmNoMemory) 412.55 218.33 P
1 F
0.44 ( if insufficient) 482.49 218.33 P
0.28 (working storage is allocated, and) 72 206.33 P
0 F
0.28 (XpmSuccess) 207.74 206.33 P
1 F
0.28 ( otherwise. The allocated buffer returned by) 261.04 206.33 P
0 F
0.28 (XpmReadFileToBuffer) 441.17 206.33 P
1 F
(should be freed with) 72 194.33 T
0 F
(XpmFree) 156.38 194.33 T
1 F
( when done.) 196.9 194.33 T
0 F
(XpmWriteFileFromBuffer) 72 162.33 T
1 F
( writes a buffer to a file.) 185.8 162.33 T
(int XpmWriteFileFromData\050) 72 144.33 T
4 F
(filename, data) 187.21 144.33 T
1 F
(\051) 244.4 144.33 T
(char) 108 132.33 T
4 F
(*filename;) 127.7 132.33 T
1 F
(char) 108 120.33 T
4 F
(*buffer;) 127.7 120.33 T
(filename) 72 104.33 T
1 F
(Specifies the file name to write.) 171 104.33 T
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 18
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(19) 300.12 54.85 T
4 10 Q
(buffer) 72 686.18 T
1 F
(Specifies the buffer to read.) 171 686.18 T
0 F
(XpmReadFileTobuffer) 72 662.18 T
1 F
( returns) 169.72 662.18 T
0 F
(XpmOpenFailed) 202.47 662.18 T
1 F
( if it cannot open the file, and) 273.55 662.18 T
0 F
(XpmSuccess) 393.74 662.18 T
1 F
( otherwise.) 447.04 662.18 T
0 12 Q
(3.1.7) 72 618.84 T
(Miscellaneous functions) 108 618.84 T
1 10 Q
(To free possible data stored into an) 72 598.18 T
0 F
(XpmAttributes) 214.95 598.18 T
1 F
( structure use) 279.91 598.18 T
0 F
(XpmFreeAttributes) 335.7 598.18 T
1 F
(.) 420.07 598.18 T
(int XpmFreeAttributes\050) 72 580.18 T
4 F
(attributes) 166.11 580.18 T
1 F
(\051) 204.43 580.18 T
(XpmAttributes) 108 568.18 T
4 F
(*attributes;) 170.47 568.18 T
(attributes) 72 552.18 T
1 F
( Specifies the structure to free.) 110.32 552.18 T
(The) 72 528.18 T
0 F
(XpmFreeAttributes) 90.04 528.18 T
1 F
( frees the structure members which have been malloc\325ed: the pixels list.) 174.41 528.18 T
(To dynamically allocate an) 72 496.18 T
0 F
(XpmAttributes) 183.03 496.18 T
1 F
( structure use the) 247.98 496.18 T
0 F
(XpmAttributesSize) 320.98 496.18 T
1 F
( function.) 403.15 496.18 T
(int XpmAttributesSize\050\051) 72 478.18 T
0.43 (The) 72 454.18 P
0 F
0.43 (XpmAttributesSize) 90.47 454.18 P
1 F
0.43 ( function provides application using dynamic libraries with a safe way to allocate and then) 172.63 454.18 P
-0.41 (refer to an) 72 442.18 P
0 F
-0.41 (XpmAttributes) 114.35 442.18 P
1 F
-0.41 (structure, disregarding whether the) 181.4 442.18 P
0 F
-0.41 (XpmAttributes) 321.61 442.18 P
1 F
-0.41 ( structure size has changed or not since) 386.57 442.18 P
(compiled.) 72 430.18 T
(To free data possibly stored into an array of) 72 398.18 T
0 F
(XpmExtension) 249.36 398.18 T
1 F
( use) 312.67 398.18 T
0 F
(XpmFreeExtensions) 330.99 398.18 T
1 F
(.) 417.6 398.18 T
(int XpmFreeExtensions\050) 72 380.18 T
4 F
(extensions, nextensions) 170 380.18 T
1 F
(\051) 263.27 380.18 T
(XpmExtension) 108 368.18 T
4 F
(*extensions;) 170.47 368.18 T
1 F
(int) 108 356.18 T
4 F
(nextensions;) 121.05 356.18 T
(extensions) 72 340.18 T
1 F
(Specifies the array to free.) 171 340.18 T
4 F
(nextensions) 72 324.18 T
1 F
(Specifies the number of extensions.) 171 324.18 T
-0.29 (This function frees all data stored in every extension and the array itself. Note that) 72 300.18 P
0 F
-0.29 (XpmFreeAttributes) 399.04 300.18 P
1 F
-0.29 ( call this func-) 483.42 300.18 P
(tion and thus most of the time it should not need to be explicitly called.) 72 288.18 T
(To free any data allocated by an) 72 256.18 T
0 F
(Xpm) 202.72 256.18 T
1 F
( function use the) 223.82 256.18 T
0 F
(XpmFree) 292.66 256.18 T
1 F
( function.) 333.18 256.18 T
(int XpmFree\050) 72 238.18 T
4 F
(ptr) 126.13 238.18 T
1 F
(\051) 137.79 238.18 T
(char) 108 226.18 T
4 F
(*ptr;) 127.7 226.18 T
(ptr) 72 210.18 T
1 F
( Specifies the data to free.) 83.66 210.18 T
-0.25 (The current distribution of the Xpm library uses the standard memory allocation functions and thus) 72 186.18 P
0 F
-0.25 (XpmFree) 467.21 186.18 P
1 F
-0.25 ( is noth-) 507.73 186.18 P
0.14 (ing else than a define to the standard) 72 174.18 P
0 F
0.14 (free) 221.9 174.18 P
1 F
0.14 (. However since these functions may be redefined in specific environments) 238.55 174.18 P
(it is wise to use) 72 162.18 T
0 F
(XpmFree) 136.13 162.18 T
1 F
(.) 176.65 162.18 T
(To get data when building an error message, one can use) 72 130.18 T
0 F
(XpmGetErrorString) 301.26 130.18 T
1 F
(char *XpmGetErrorString\050) 72 112.18 T
4 F
(errorcode) 179.97 112.18 T
1 F
(\051) 219.94 112.18 T
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 19
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(20) 300 56.01 T
1 10 Q
(int) 108 686.33 T
4 F
(errorcode) 121.05 686.33 T
1 F
(;) 161.02 686.33 T
4 F
(errorcode) 72 670.33 T
1 F
( Specifies the Xpm error.) 111.97 670.33 T
(XpmGetErrorString returns a string related to the given) 72 646.33 T
0 F
(Xpm) 296.29 646.33 T
1 F
( error code.) 317.39 646.33 T
0 14 Q
(3.2) 72 199.67 T
(The Advanced Level Interface) 100.8 199.67 T
1 10 Q
-0.22 (The advanced level interface is a set of functions that applications, such as icon editors, which needs to retreive all the) 72 174.33 P
(information stored in an XPM file and applications which perform data caching can use.) 72 162.33 T
(The following subsections describe these functions and how to use them.) 72 138.33 T
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 20
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(21) 300.12 54.85 T
(3.2.1) 72 684.84 T
(The structures) 108 684.84 T
1 10 Q
(The purpose of the structures defined in this section is to be able to store XPM images in memory to avoid any) 72 664.18 T
(additional parsing without losing information such as color defaults, symbolic color names, and comments.) 72 652.18 T
-0.31 (Indeed, considering the) 72 636.18 P
0 F
-0.31 (XPM) 167.1 636.18 P
1 F
-0.31 (format one can see that there is a lot more information related to a color than just an rgb) 192.04 636.18 P
-0.13 (value or a colormap index, the) 72 624.18 P
0 F
-0.13 (XpmColor) 195.29 624.18 P
1 F
-0.13 ( structure allows to store the different color defaults, the symbolic name of) 240.81 624.18 P
(a color, and the characters string which represents it.) 72 612.18 T
(typedef struct {) 72 596.18 T
(char *string;) 144 578.18 T
(/* characters string */) 288 578.18 T
(char *symbolic;) 144 560.18 T
(/* symbolic name */) 288 560.18 T
(char *m_color;) 144 542.18 T
(/* monochrom default */) 288 542.18 T
(char *g4_color;) 144 524.18 T
(/* 4 level grayscale default */) 288 524.18 T
(char *g_color;) 144 506.18 T
(/* other level grayscale default */) 288 506.18 T
(char *c_color;) 144 488.18 T
(/* color default */) 288 488.18 T
(} XpmColor;) 72 470.18 T
-0.2 (The) 72 452.18 P
0 F
-0.2 (XpmImage) 89.83 452.18 P
1 F
-0.2 ( structure is defined to store the image data definition with its size, the length of the characters strings) 137.58 452.18 P
(representing each color, and the related color table.) 72 440.18 T
(typedef struct {) 72 422.18 T
(unsigned int width;) 144 404.18 T
(/* image width */) 288 404.18 T
(unsigned int height;) 144 386.18 T
(/* image height */) 288 386.18 T
(unsigned int cpp;) 144 368.18 T
(/* number of characters per pixel */) 288 368.18 T
(unsigned int ncolors;) 144 350.18 T
(/* number of colors */) 288 350.18 T
(XpmColor *colorTable;) 144 332.18 T
(/* list of related colors */) 288 332.18 T
(unsigned int *data;) 144 314.18 T
(/* image data */) 288 314.18 T
(} XpmImage) 72 296.18 T
0.29 (The) 72 278.18 P
0 F
0.29 (XpmImage) 90.33 278.18 P
1 F
0.29 ( data is an array of width*height color indexes, each color index referencing the related color in the) 138.08 278.18 P
(color table.) 72 266.18 T
-0.37 (In addition, to get possible comments back while writing out to a file an) 72 242.18 P
0 F
-0.37 (XpmInfo) 356.91 242.18 P
1 F
-0.37 (s structure can be passed to the read-) 395.78 242.18 P
-0.31 (ing function, and then given back to the writing function. Comments are limited to a single string by) 72 230.18 P
0 F
-0.31 (XPM) 470.12 230.18 P
1 F
-0.31 ( format sec-) 492.88 230.18 P
(tion. If more exist in the read file, then only the last comment of each section will be stored.) 72 218.18 T
(typedef struct {) 72 194.18 T
(char *hints_cmt;) 144 176.18 T
(/* comment of the hints section */) 288 176.18 T
(char *colors_cmt;) 144 160.18 T
(/* comment of the colors section */) 288 160.18 T
(char *pixels_cmt;) 144 144.18 T
(/* comment of the pixels section */) 288 144.18 T
(} XpmInfos;) 72 120.18 T
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 21
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(22) 300 56.01 T
(3.2.2) 72 685 T
(Functions to deal with XPM files) 108 685 T
1 10 Q
(To create an) 72 660.33 T
0 F
(XpmImage) 123.89 660.33 T
1 F
( from an XPM file, use) 171.63 660.33 T
0 F
(XpmReadFileToXpmImage) 266.29 660.33 T
1 F
(.) 385.11 660.33 T
(int XpmReadFileToXpmImage\050) 72 642.33 T
4 F
(filename, image, attributes) 200.53 642.33 T
1 F
(, infos\051) 307.69 642.33 T
(char) 108 630.33 T
4 F
(*filename;) 127.7 630.33 T
1 F
(XpmImage) 108 618.33 T
4 F
(*image;) 155.46 618.33 T
1 F
(XpmAttributes) 108 606.33 T
4 F
(*attributes;) 170.47 606.33 T
1 F
(XpmInfos *infos;) 108 594.33 T
4 F
(filename) 72 578.33 T
1 F
(Specifies the file name to read from.) 171 578.33 T
4 F
(image) 72 562.33 T
1 F
(Specifies the image structure location.) 171 562.33 T
4 F
(attributes) 72 546.33 T
1 F
(Specifies the location of a structure to store possible extensions \050or NULL\051.) 171 546.33 T
(infos) 72 530.33 T
(Specifies the location of a structure to store possible information \050or NULL\051.) 171 530.33 T
0.35 (The) 72 506.33 P
0 F
0.35 (XpmReadFileToXpmImage) 90.39 506.33 P
1 F
0.35 ( function reads in a file in the) 209.21 506.33 P
0 F
0.35 (XPM) 331.96 506.33 P
1 F
0.35 ( format. If the file cannot be opened it returns) 354.72 506.33 P
0 F
-0.2 (XpmOpenFailed) 72 494.33 P
1 F
-0.2 (. If the file can be opened but does not contain valid) 143.08 494.33 P
0 F
-0.2 (XPM) 350.78 494.33 P
1 F
-0.2 (data, it returns) 375.83 494.33 P
0 F
-0.2 (XpmFileInvalid) 435.18 494.33 P
1 F
-0.2 (. If insuf-) 502.93 494.33 P
0.07 (ficient working storage is allocated, it returns) 72 482.33 P
0 F
0.07 (XpmNoMemory) 256.24 482.33 P
1 F
0.07 (. On success it fills in the given) 326.18 482.33 P
0 F
0.07 (XpmImage) 454.72 482.33 P
1 F
0.07 ( structure) 502.46 482.33 P
-0.17 (and returns) 72 470.33 P
0 F
-0.17 (XpmSuccess) 118.85 470.33 P
1 F
-0.17 (. Also it stores possible extensions in the) 172.15 470.33 P
0 F
-0.17 (XpmAttributes) 336.02 470.33 P
1 F
-0.17 ( structure if one is given and possi-) 400.97 470.33 P
(ble information in the) 72 458.33 T
0 F
(XpmInfos) 161.39 458.33 T
1 F
( struture if one is given) 204.15 458.33 T
-0.4 (In addition on systems which support such features) 72 434.33 P
0 F
-0.4 (XpmReadFileToXpmImage) 275.9 434.33 P
1 F
-0.4 (deals with compressed files by fork-) 396.82 434.33 P
-0.09 (ing an) 72 422.33 P
0 F
-0.09 (uncompress) 99.03 422.33 P
1 F
-0.09 ( or) 150.11 422.33 P
0 F
-0.09 (gzip) 163.26 422.33 P
1 F
-0.09 ( process and reading from the piped result. It assumes that the specified file is compressed) 181.03 422.33 P
0.25 (if the given file name ends by \325.Z\325 or \325.gz\325. In case the file name does not end so,) 72 410.33 P
0 F
0.25 (XpmReadFileToXpmImage) 402.33 410.33 P
1 F
0.25 ( first) 521.15 410.33 P
0.01 (looks for a file of which the name is the given one followed by \325.Z\325 or \325.gz\325; then if such a file does not exist, it looks) 72 398.33 P
-0.32 (for the given file \050assumed as not compressed\051. And if instead of a file name) 72 386.33 P
0 F
-0.32 (NULL) 375.27 386.33 P
1 F
-0.32 ( is passed to) 403.03 386.33 P
0 F
-0.32 (XpmReadFileToXp-) 452.83 386.33 P
(mImage) 72 374.33 T
1 F
(, it reads from the standard input.) 106.97 374.33 T
(To write out an) 72 342.33 T
0 F
(XpmImage) 135.85 342.33 T
1 F
( to an) 183.59 342.33 T
0 F
(XPM) 208.29 342.33 T
1 F
( file, use) 231.05 342.33 T
0 F
(XpmWriteFileFromXpmImage) 267.69 342.33 T
1 F
(int XpmWriteFileFromXpmImage\050) 72 324.33 T
4 F
(filename, image, shapeimage, attributes, infos) 213.3 324.33 T
1 F
(\051) 397.64 324.33 T
(char) 108 312.33 T
4 F
(*filename;) 127.7 312.33 T
1 F
(XImage) 108 300.33 T
4 F
(*image;) 142.69 300.33 T
1 F
(XpmAttributes) 108 288.33 T
4 F
(*attributes;) 170.47 288.33 T
1 F
(XpmInfos *infos;) 108 276.33 T
4 F
(filename) 72 260.33 T
1 F
(Specifies the file name to use.) 171 260.33 T
4 F
(image) 72 244.33 T
1 F
(Specifies the image.) 171 244.33 T
4 F
(attributes) 72 228.33 T
1 F
(Specifies the location of a structure containing extensions \050or NULL\051.) 171 228.33 T
4 F
(infos) 72 212.33 T
1 F
(Specifies the location of a structure to get information from \050or NULL\051.) 171 212.33 T
0.2 (The) 72 188.33 P
0 F
0.2 (XpmWriteFileFromXpmImage) 90.24 188.33 P
1 F
0.2 ( function writes an image out to a file in the) 224.03 188.33 P
0 F
0.2 (XPM) 403.63 188.33 P
1 F
0.2 ( format. If the file cannot be) 426.38 188.33 P
-0.61 (opened, it returns) 72 176.33 P
0 F
-0.61 (XpmOpenFailed) 142.34 176.33 P
1 F
-0.61 (. If insufficient working storage is allocated, it returns) 213.42 176.33 P
0 F
-0.61 (XpmNoMemory) 425.83 176.33 P
1 F
-0.61 (. If no error) 495.77 176.33 P
0.19 (occurs then it returns) 72 164.33 P
0 F
0.19 (XpmSuccess) 159.36 164.33 P
1 F
0.19 (. In addition if it is given an) 212.66 164.33 P
0 F
0.19 (XpmAttributes) 327.72 164.33 P
1 F
0.19 ( structure containing extensions and/) 392.67 164.33 P
(or an) 72 152.33 T
0 F
(XpmInfos) 94.76 152.33 T
1 F
( struture containing information it will write them out too.) 137.51 152.33 T
0.4 (In addition on systems which support such features if the given file name ends by \325.Z\325 or \325.gz\325 it is assumed to be a) 72 128.33 P
0.3 (compressed file. Then,) 72 116.33 P
0 F
0.3 (XpmWriteFileFromXpmImage) 166.43 116.33 P
1 F
0.3 (writes to a piped) 303.02 116.33 P
0 F
0.3 (compress) 373.05 116.33 P
1 F
0.3 ( or) 413.02 116.33 P
0 F
0.3 (gzip) 426.94 116.33 P
1 F
0.3 ( process. And if instead) 444.71 116.33 P
(of a file name) 72 104.33 T
0 F
(NULL) 129.73 104.33 T
1 F
(is passed to) 159.99 104.33 T
0 F
(XpmWriteFileFromXpmImage) 208.57 104.33 T
1 F
(, it writes to the standard output.) 342.36 104.33 T
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 22
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(23) 300.12 54.85 T
(3.2.3) 72 684.84 T
(Functions to deal with XPM data) 108 684.84 T
1 10 Q
(To create an) 72 660.18 T
0 F
(XpmImage) 123.89 660.18 T
1 F
( from an) 171.63 660.18 T
0 F
(XPM) 207.99 660.18 T
1 F
( data, use) 230.75 660.18 T
0 F
(XpmCreateXpmImageFromData) 270.72 660.18 T
1 F
(.) 412.82 660.18 T
(int XpmCreateXpmImageFromData\050) 72 642.18 T
4 F
(data, image, attributes) 219.95 642.18 T
1 F
(\051) 310.46 642.18 T
(char) 108 630.18 T
4 F
(**data;) 127.7 630.18 T
1 F
(XpmImage) 108 618.18 T
4 F
(*image;) 155.46 618.18 T
1 F
(XpmAttributes) 108 606.18 T
4 F
(*attributes;) 170.47 606.18 T
(data) 72 590.18 T
1 F
(Specifies the location of the data.) 171 590.18 T
4 F
(image) 72 574.18 T
1 F
(Specifies the image structure location.) 171 574.18 T
4 F
(attributes) 72 558.18 T
1 F
-0.34 (Specifies the location of an) 171 558.18 P
0 F
-0.34 (XpmAttributes) 280.63 558.18 P
1 F
-0.34 ( structure to get and store information, or) 345.59 558.18 P
0 F
-0.34 (NULL) 509.74 558.18 P
1 F
-0.34 (.) 537.5 558.18 P
0 F
-0.08 (XpmCreateXpmImageFromData) 72 534.18 P
1 F
-0.08 ( works as) 214.1 534.18 P
0 F
-0.08 (XpmCreateXpmImageFromFile) 254.11 534.18 P
1 F
-0.08 ( does, excepts it reads from the given) 391.78 534.18 P
-0.25 (data instead of a file, and it does not take any) 72 522.18 P
0 F
-0.25 (XpmInfos) 252.44 522.18 P
1 F
-0.25 ( structure in argument since a data cannot store any comment.) 295.2 522.18 P
0 F
(XpmCreateDataFromXpmImage) 72 498.18 T
1 F
( creates an) 214.1 498.18 T
0 F
(XPM) 258.78 498.18 T
1 F
( data from an) 281.54 498.18 T
0 F
(XmImage) 337.04 498.18 T
1 F
(.) 379.23 498.18 T
(int XpmCreateDataFromXpmImage\050) 72 480.18 T
4 F
(data_return, image, attributes) 219.95 480.18 T
1 F
(\051) 340.44 480.18 T
(char) 108 468.18 T
4 F
(***data_return;) 127.7 468.18 T
1 F
(XxpmImage) 108 456.18 T
4 F
(*image;) 160.46 456.18 T
1 F
(XpmAttributes) 108 444.18 T
4 F
(*attributes;) 170.47 444.18 T
(data_return) 72 428.18 T
1 F
(Returns the data which is created.) 171 428.18 T
4 F
(image) 72 412.18 T
1 F
(Specifies the image.) 171 412.18 T
4 F
(attributes) 72 396.18 T
1 F
(Specifies the location of a structure to get information.) 171 396.18 T
-0.15 (The) 72 372.18 P
0 F
-0.15 (XpmCreateDataFromXpmImage) 89.89 372.18 P
1 F
-0.15 ( function exactly works as) 231.99 372.18 P
0 F
-0.15 (XpmWriteFileFromXpmImage) 338.66 372.18 P
1 F
-0.15 ( does and returns) 472.45 372.18 P
0.08 (the same way. It just writes to a single block malloc\325ed data instead of to a file. It is the caller\325s responsibility to free) 72 360.18 P
0.34 (the data, using) 72 348.18 P
0 F
0.34 (XpmFree) 133.54 348.18 P
1 F
0.34 ( when finished. Of course this function does not take any) 174.06 348.18 P
0 F
0.34 (XpmInfos) 408.22 348.18 P
1 F
0.34 ( structure in argument) 450.98 348.18 P
(since a data cannot store any comment.) 72 336.18 T
0 12 Q
(3.2.4) 72 292.85 T
(Functions to deal with XPM buffers) 108 292.85 T
1 10 Q
(To create an) 72 268.18 T
0 F
(XpmImage) 123.89 268.18 T
1 F
( from an) 171.63 268.18 T
0 F
(XPM) 207.99 268.18 T
1 F
( buffer, use) 230.75 268.18 T
0 F
(XpmCreateXpmImageFromBuffer) 278.49 268.18 T
1 F
(.) 427.8 268.18 T
(int XpmCreateXpmImageFromBuffer\050) 72 250.18 T
4 F
(buffer, image, attributes, infos) 227.16 250.18 T
1 F
(\051) 348.22 250.18 T
(char) 108 238.18 T
4 F
(*buffer;) 127.7 238.18 T
1 F
(XpmImage) 108 226.18 T
4 F
(*image;) 155.46 226.18 T
1 F
(XpmAttributes) 108 214.18 T
4 F
(*attributes;) 170.47 214.18 T
1 F
(XpmInfos) 108 202.18 T
4 F
(*infos;) 151.03 202.18 T
(buffer) 72 186.18 T
1 F
(Specifies the location of the buffer.) 171 186.18 T
4 F
(image) 72 170.18 T
1 F
(Specifies the image structure location.) 171 170.18 T
4 F
(attributes) 72 154.18 T
1 F
(Specifies the location of a structure to get and store information \050or NULL) 171 154.18 T
0 F
(\051) 469.12 154.18 T
1 F
(.) 472.44 154.18 T
4 F
(infos) 72 138.18 T
1 F
(Specifies the location of a structure to store possible information \050or NULL) 171 138.18 T
0 F
(\051) 472.73 138.18 T
1 F
(.) 476.06 138.18 T
-0.3 (The) 72 114.18 P
0 F
-0.3 (XpmCreateXpmImageFromBuffer) 89.74 114.18 P
1 F
-0.3 ( works the same way as) 239.06 114.18 P
0 F
-0.3 (XpmReadFileToXpmImage) 334.41 114.18 P
1 F
-0.3 (, it just reads the buff-) 453.23 114.18 P
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 23
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(24) 300 56.01 T
1 10 Q
-0.48 (er instead of the file. Be aware that the feature provided on some systems by) 72 686.33 P
0 F
-0.48 (XpmReadFileToXpmImage) 372.93 686.33 P
1 F
-0.48 (to deal with) 493.76 686.33 P
(compressed files is not available here.) 72 674.33 T
(To create an) 72 642.33 T
0 F
(XPM) 123.89 642.33 T
1 F
( buffer from an) 146.65 642.33 T
0 F
(XpmImage) 209.92 642.33 T
1 F
(, use) 257.67 642.33 T
0 F
(XpmCreateBufferFromXpmImage) 278.49 642.33 T
1 F
(.) 427.8 642.33 T
(int XpmCreateBufferFromXpmImage\050) 72 624.33 T
4 F
(buffer_return, image, attributes) 227.16 624.33 T
1 F
(\051) 353.77 624.33 T
(char) 108 612.33 T
4 F
(**buffer_return;) 127.7 612.33 T
1 F
(XpmImage) 108 600.33 T
4 F
(*image;) 155.46 600.33 T
1 F
(XpmInfos) 108 588.33 T
4 F
(*infos;) 151.03 588.33 T
(buffer_return) 72 572.33 T
1 F
(Returns the buffer which is created.) 171 572.33 T
4 F
(image) 72 556.33 T
1 F
(Specifies the image.) 171 556.33 T
4 F
(attributes) 72 540.33 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 540.33 T
4 F
(infos) 72 524.33 T
1 F
(Specifies the location of a structure to get possible information \050or NULL) 171 524.33 T
0 F
(\051) 465.52 524.33 T
1 F
(.) 468.85 524.33 T
1.25 (The) 72 500.33 P
0 F
1.25 (XpmCreateBufferFromXpmImage) 91.29 500.33 P
1 F
1.25 ( works as) 240.61 500.33 P
0 F
1.25 (XpmWriteFileFromXpmImage) 284.61 500.33 P
1 F
1.25 (, it just writes to a malloc\325ed) 418.4 500.33 P
(buffer instead of to a file. The caller should free the buffer using) 72 488.33 T
0 F
(XpmFree) 331.79 488.33 T
1 F
( when finished.) 372.3 488.33 T
0 12 Q
(3.2.5) 72 445 T
(Functions to deal with X images) 108 445 T
1 10 Q
(To create an) 72 420.33 T
0 F
(XImage) 123.89 420.33 T
1 F
( from an) 157.75 420.33 T
0 F
(XpmImage) 194.11 420.33 T
1 F
(, use) 241.86 420.33 T
0 F
(XpmCreateImageFromXpmImage) 262.67 420.33 T
1 F
(.) 410.88 420.33 T
(int XpmCreateImageFromXpmImage\050) 72 402.33 T
4 F
(display, image, image_return, shapeimage_return, attributes) 226.05 402.33 T
1 F
(\051) 469.8 402.33 T
(Display) 108 390.33 T
4 F
(*display;) 141.59 390.33 T
1 F
(XpmImage) 108 378.33 T
4 F
(*image;) 155.46 378.33 T
1 F
(XImage) 108 366.33 T
4 F
(*image_return;) 142.69 366.33 T
1 F
(XImage) 108 354.33 T
4 F
(*shapeimage_return;) 142.69 354.33 T
1 F
(XpmAttributes) 108 342.33 T
4 F
(*attributes;) 170.47 342.33 T
(display) 72 326.33 T
1 F
(Specifies the connection to the X server.) 171 326.33 T
4 F
(image) 72 310.33 T
1 F
(Specifies the) 171 310.33 T
0 F
(XpmImage) 224.85 310.33 T
1 F
(.) 272.59 310.33 T
4 F
(image_return) 72 294.33 T
1 F
(Returns the image which is created.) 171 294.33 T
4 F
(shapeimage_return) 72 278.33 T
1 F
(Returns the shape mask image which is created if any.) 171 278.33 T
4 F
(attributes) 72 262.33 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 262.33 T
0.05 (From the given) 72 238.33 P
0 F
0.05 (XpmImage) 135.73 238.33 P
1 F
0.05 ( and) 183.47 238.33 P
0 F
0.05 (XpmAttributes) 203 238.33 P
1 F
0.05 ( if not) 267.95 238.33 P
0 F
0.05 (NULL) 294.48 238.33 P
1 F
0.05 (,) 322.25 238.33 P
0 F
0.05 (XpmCreateImageFromXpmImage) 327.3 238.33 P
1 F
0.05 ( allocates colors) 475.5 238.33 P
(and creates X images following the same mechanism as) 72 226.33 T
0 F
(XpmReadFileToImage) 297.67 226.33 T
1 F
(.) 395.38 226.33 T
(To create an) 72 194.33 T
0 F
(XpmImage) 123.89 194.33 T
1 F
( from an) 171.63 194.33 T
0 F
(XImage) 207.99 194.33 T
1 F
(, use) 241.86 194.33 T
0 F
(XpmCreateXpmImageFromImage) 262.67 194.33 T
1 F
(.) 410.88 194.33 T
(int XpmCreateXpmImageFromImage\050) 72 176.33 T
4 F
(display, image, shapeimage, xpmimage, attributes) 226.05 176.33 T
1 F
(\051) 426.48 176.33 T
(Display) 108 164.33 T
4 F
(*display;) 141.59 164.33 T
1 F
(XImage) 108 152.33 T
4 F
(*image;) 142.69 152.33 T
1 F
(XImage) 108 140.33 T
4 F
(*shapeimage;) 142.69 140.33 T
1 F
(XpmImage) 108 128.33 T
4 F
(*xpmimage) 155.46 128.33 T
1 F
(XpmAttributes) 108 116.33 T
4 F
(*attributes;) 170.47 116.33 T
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 24
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(25) 300.12 54.85 T
4 10 Q
(display) 72 686.18 T
1 F
(Specifies the connection to the X server.) 171 686.18 T
4 F
(image) 72 670.18 T
1 F
(Specifies the image which is created.) 171 670.18 T
4 F
(shapeimage) 72 654.18 T
1 F
(Specifies the shape mask image which is created if any.) 171 654.18 T
4 F
(xpmimage) 72 638.18 T
1 F
(Specifies the location of an) 171 638.18 T
0 F
(XpmImage) 282.31 638.18 T
1 F
(structure.) 332.55 638.18 T
4 F
(attributes) 72 622.18 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 622.18 T
-0.51 (From the given X images and) 72 598.18 P
0 F
-0.51 (XpmAttributes) 189.96 598.18 P
1 F
-0.51 ( if not) 254.92 598.18 P
0 F
-0.51 (NULL) 279.76 598.18 P
1 F
-0.51 (,) 307.52 598.18 P
0 F
-0.51 (XpmCreateXpmImageFromImage) 312.01 598.18 P
1 F
-0.51 ( creates an) 460.22 598.18 P
0 F
-0.51 (XpmIm-) 503.36 598.18 P
(age) 72 586.18 T
1 F
( following the same mechanism as) 86.43 586.18 T
0 F
(XpmWriteFileFromImage) 226.9 586.18 T
1 F
(.) 339.58 586.18 T
0 12 Q
(3.2.6) 72 542.84 T
(Functions to deal with X pixmaps) 108 542.84 T
1 10 Q
-0.25 (To create a) 72 518.18 P
0 F
-0.25 (Pixmap) 118.13 518.18 P
1 F
-0.25 (with its possible related shapemask from an) 153.13 518.18 P
0 F
-0.25 (XpmImage) 328.73 518.18 P
1 F
-0.25 (, use) 376.47 518.18 P
0 F
-0.25 (XpmCreatePixmapFromXpmIm-) 396.78 518.18 P
(age) 72 506.18 T
1 F
(.) 86.43 506.18 T
(int XpmCreatePixmapFromXpmImage\050) 72 488.18 T
4 F
(display, d, image, pixmap_return, shapemask_return, attributes) 231.62 488.18 T
1 F
(\051) 486.47 488.18 T
(Display) 108 476.18 T
4 F
(*display;) 141.59 476.18 T
1 F
(Drawable d;) 108 464.18 T
(XpmImage) 108 452.18 T
4 F
(*image;) 155.46 452.18 T
1 F
(Pixmap) 108 440.18 T
4 F
(*pixmap_return;) 141.04 440.18 T
1 F
(Pixmap) 108 428.18 T
4 F
(*shapemask_return;) 141.04 428.18 T
1 F
(XpmAttributes) 108 416.18 T
4 F
(*attributes;) 170.47 416.18 T
(display) 72 400.18 T
1 F
(Specifies the connection to the X server.) 171 400.18 T
4 F
(d) 72 384.18 T
1 F
(Specifies which screen the pixmap is created on.) 171 384.18 T
4 F
(image) 72 368.18 T
1 F
(Specifies the) 171 368.18 T
0 F
(XpmImage) 224.85 368.18 T
1 F
(.) 272.59 368.18 T
4 F
(pixmap_return) 72 352.18 T
1 F
(Returns the pixmap which is created.) 171 352.18 T
4 F
(shapemask_return) 72 336.18 T
1 F
(Returns the shape mask which is created if any.) 171 336.18 T
4 F
(attributes) 72 320.18 T
1 F
(Specifies the location of a structure to get and store information \050or NULL\051.) 171 320.18 T
0 F
0.35 (XpmCreatePixmapFromXpmImage) 72 296.18 P
1 F
0.35 ( creates X images calling) 226.32 296.18 P
0 F
0.35 (XpmCreateImageFromXpmImage) 331.05 296.18 P
1 F
0.35 ( with the given) 479.26 296.18 P
0 F
-0.07 (XpmImage) 72 284.18 P
1 F
-0.07 ( and) 119.74 284.18 P
0 F
-0.07 (XpmAttributes) 139.03 284.18 P
1 F
-0.07 (, then it creates the related pixmaps which are returned to) 203.98 284.18 P
4 F
-0.07 (pixmap_return) 434.66 284.18 P
1 F
-0.07 ( and) 494.07 284.18 P
4 F
-0.07 (shape-) 513.35 284.18 P
(mask_return) 72 272.18 T
1 F
( using) 122.52 272.18 T
0 F
(XPutImage) 149.18 272.18 T
1 F
(. Finally it destroys the X images with) 198.03 272.18 T
0 F
(XDestroyImage) 353.23 272.18 T
1 F
(.) 420.39 272.18 T
(To create an) 72 240.18 T
0 F
(XpmImage) 123.89 240.18 T
1 F
( from a) 171.63 240.18 T
0 F
(Pixmp) 203 240.18 T
1 F
(, use) 230.76 240.18 T
0 F
(XpmCreateXpmImageFromPixmap) 251.58 240.18 T
1 F
(.) 405.91 240.18 T
(int XpmCreateXpmImageFromPixmap\050) 72 222.18 T
4 F
(display, pixmap, shapemask, xpmimage, attributes) 231.62 222.18 T
1 F
(\051) 433.16 222.18 T
(Display) 108 210.18 T
4 F
(*display;) 141.59 210.18 T
1 F
(Pixmap) 108 198.18 T
4 F
(*pixmap;) 141.04 198.18 T
1 F
(Pixmap) 108 186.18 T
4 F
(*shapemask;) 141.04 186.18 T
1 F
(XpmImage) 108 174.18 T
4 F
(*xpmimage) 155.46 174.18 T
1 F
(XpmAttributes) 108 162.18 T
4 F
(*attributes;) 170.47 162.18 T
(display) 72 146.18 T
1 F
(Specifies the connection to the X server.) 171 146.18 T
4 F
(pixmap) 72 130.18 T
1 F
(Specifies the pixmap.) 171 130.18 T
4 F
(shapemask) 72 114.18 T
1 F
(Specifies the shape mask pixmap.) 171 114.18 T
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 25
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(26) 300 56.01 T
4 10 Q
(xpmimage) 72 686.33 T
1 F
(Specifies the location of an) 171 686.33 T
0 F
(XpmImage) 282.31 686.33 T
1 F
(structure.) 332.55 686.33 T
4 F
(attributes) 72 670.33 T
1 F
(Specifies the location of a structure containing information \050or NULL\051.) 171 670.33 T
0 (From the given pixmaps and) 72 646.33 P
0 F
0 (XpmAttributes) 188.87 646.33 P
1 F
0 ( if not) 253.82 646.33 P
0 F
0 (NULL) 280.2 646.33 P
1 F
0 (,) 307.96 646.33 P
0 F
0 (XpmCreateXpmImageFromPixmap) 312.96 646.33 P
1 F
0 (gets the related X) 469.78 646.33 P
0.73 (images by calling) 72 634.33 P
0 F
0.73 (XGetImage) 147.19 634.33 P
1 F
0.73 (, then it gives them to) 196.59 634.33 P
0 F
0.73 (XpmCreateXpmImageFromImage) 290.08 634.33 P
1 F
0.73 ( to create an) 438.29 634.33 P
0 F
0.73 (XpmImage) 492.26 634.33 P
1 F
(which is returned to) 72 622.33 T
4 F
(xpmimage) 154.16 622.33 T
1 F
(. Finally it destroys the created X images using) 195.24 622.33 T
0 F
(XDestroyImage) 385.68 622.33 T
1 F
(.) 452.84 622.33 T
0 12 Q
(3.2.7) 72 579 T
(Miscellaneous functions) 108 579 T
1 10 Q
(To free possible data stored into an) 72 554.33 T
0 F
(XpmImage) 214.95 554.33 T
1 F
(structure use) 265.19 554.33 T
0 F
(XpmFreeXpmImage) 318.48 554.33 T
1 F
(.) 406.75 554.33 T
(int XpmFreeXpmImage\050) 72 536.33 T
4 F
(image) 171.1 536.33 T
1 F
(\051) 195.52 536.33 T
(XpmImage) 108 524.33 T
4 F
(*image;) 155.46 524.33 T
(image) 72 508.33 T
1 F
(Specifies the structure to free.) 98.93 508.33 T
(The) 72 484.33 T
0 F
(XpmFreeXpmImage) 90.04 484.33 T
1 F
(frees the structure members which are not NULL, but not the structure itself.) 180.8 484.33 T
(To free possible data stored into an) 72 452.33 T
0 F
(XpmInfos) 214.95 452.33 T
1 F
(structure use) 260.21 452.33 T
0 F
(XpmFreeXpmInfos) 313.5 452.33 T
1 F
(.) 396.77 452.33 T
(int XpmFreeXpmInfos\050) 72 434.33 T
4 F
(infos) 166.66 434.33 T
1 F
(\051) 186.1 434.33 T
(XpmInfos) 108 422.33 T
4 F
(*infos;) 148.53 422.33 T
(iinfos) 72 406.33 T
1 F
(Specifies the structure to free.) 96.72 406.33 T
(The) 72 382.33 T
0 F
(XpmFreeXpmInfos) 90.04 382.33 T
1 F
(frees the structure members which are not NULL, but not the structure itself.) 175.81 382.33 T
FMENDPAGE
%%EndPage: "26" 26
%%Page: "25" 26
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
225 639 396 657 R
7 X
V
1 18 Q
0 X
(Index of Functions) 242.54 645 T
540 72 72 72 2 L
N
1 12 Q
(XpmAttributesSize 19) 72 568 T
(XpmCreateBufferFromImage 17) 72 549 T
(XpmCreateBufferFromPixmap 18) 72 530 T
(XpmCreateBufferFromXpmImage 24) 72 511 T
(XpmCreateDataFromImage 15) 72 492 T
(XpmCreateDataFromPixmap 15) 72 473 T
(XpmCreateDataFromXpmImage 23) 72 454 T
(XpmCreateImageFromBuffer 16) 72 435 T
(XpmCreateImageFromData 14) 72 416 T
(XpmCreateImageFromXpmImage 24) 72 397 T
(XpmCreatePixmapFromBuffer 17) 72 378 T
(XpmCreatePixmapFromData 14) 72 359 T
(XpmCreatePixmapFromXpmImage 25) 72 340 T
(XpmCreateXpmImageFromBuffer 23) 72 321 T
(XpmCreateXpmImageFromData 23) 72 302 T
(XpmCreateXpmImageFromImage 24) 72 283 T
(XpmCreateXpmImageFromPixmap 25) 72 264 T
(XpmFree 19) 72 245 T
(XpmFreeAttributes 19) 72 226 T
(XpmFreeExtensions 19) 72 207 T
(XpmFreeXpmImage 26) 72 188 T
(XpmFreeXpmInfos 26) 72 169 T
(XpmGetErrorString 19) 72 150 T
(XpmReadFileToBuffer 18) 72 131 T
(XpmReadFileToData 16) 72 112 T
(XpmReadFileToImage 11) 315 568 T
(XpmReadFileToPixmap 12) 315 549 T
(XpmReadFileToXpmImage 22) 315 530 T
(XpmWriteFileFromBuffer 18) 315 511 T
(XpmWriteFileFromData 16) 315 492 T
(XpmWriteFileFromImage 13) 315 473 T
(XpmWriteFileFromPixmap 13) 315 454 T
(XpmWriteFileFromXpmImage 22) 315 435 T
FMENDPAGE
%%EndPage: "25" 27
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 26 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Helvetica
%%+ Courier
%%+ Times-Italic
