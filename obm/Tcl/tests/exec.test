# Commands covered:  exec
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in
# all copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
# OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
# CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# $Header: /user6/ouster/tcl/tests/RCS/exec.test,v 1.30 93/09/16 16:57:43 ouster Exp $ (Berkeley)

if {[string compare test [info procs test]] == 1} then {source defs}

# Basic operations.

test exec-1.1 {basic exec operation} {
    exec echo a b c
} "a b c"
test exec-1.2 {pipelining} {
    exec echo a b c d | cat | cat
} "a b c d"
test exec-1.3 {pipelining} {
    set a [exec echo a b c d | cat | wc]
    list [scan $a "%d %d %d" b c d] $b $c $d
} {3 1 4 8}

# I/O redirection: input from Tcl command.

test exec-2.1 {redirecting input from immediate source} {
    exec cat << "Sample text"
} {Sample text}
test exec-2.2 {redirecting input from immediate source} {
    exec << "Sample text" cat | cat
} {Sample text}
test exec-2.3 {redirecting input from immediate source} {
    exec cat << "Sample text" | cat
} {Sample text}
test exec-2.4 {redirecting input from immediate source} {
    exec  cat | cat << "Sample text"
} {Sample text}
test exec-2.5 {redirecting input from immediate source} {
    exec cat "<<Joined to arrows"
} {Joined to arrows}

# I/O redirection: output to file.

catch {exec rm -f gorp.file}
test exec-3.1 {redirecting output to file} {
    exec echo "Some simple words" > gorp.file
    exec cat gorp.file
} "Some simple words"
test exec-3.2 {redirecting output to file} {
    exec echo "More simple words" | >gorp.file cat | cat
    exec cat gorp.file
} "More simple words"
test exec-3.3 {redirecting output to file} {
    exec > gorp.file echo "Different simple words" | cat | cat
    exec cat gorp.file
} "Different simple words"
test exec-3.4 {redirecting output to file} {
    exec echo "Some simple words" >gorp.file
    exec cat gorp.file
} "Some simple words"
test exec-3.5 {redirecting output to file} {
    exec echo "First line" >gorp.file
    exec echo "Second line" >> gorp.file
    exec cat gorp.file
} "First line\nSecond line"
test exec-3.6 {redirecting output to file} {
    exec echo "First line" >gorp.file
    exec echo "Second line" >>gorp.file
    exec cat gorp.file
} "First line\nSecond line"
test exec-3.7 {redirecting output to file} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec echo "More text" >@ $f
    exec echo >@$f "Even more"
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nMore text\nEven more\nLine 3"

# I/O redirection: output and stderr to file.

catch {exec rm -f gorp.file}
test exec-4.1 {redirecting output and stderr to file} {
    exec echo "test output" >& gorp.file
    exec cat gorp.file
} "test output"
test exec-4.2 {redirecting output and stderr to file} {
    list [exec sh -c "echo foo bar 1>&2" >&gorp.file] \
	    [exec cat gorp.file]
} {{} {foo bar}}
test exec-4.3 {redirecting output and stderr to file} {
    exec echo "first line" > gorp.file
    list [exec sh -c "echo foo bar 1>&2" >>&gorp.file] \
	    [exec cat gorp.file]
} "{} {first line\nfoo bar}"
test exec-4.4 {redirecting output and stderr to file} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec echo "More text" >&@ $f
    exec echo >&@$f "Even more"
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nMore text\nEven more\nLine 3"
test exec-4.5 {redirecting output and stderr to file} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec >&@ $f sh -c "echo foo bar 1>&2"
    exec >&@$f sh -c "echo xyzzy 1>&2"
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nfoo bar\nxyzzy\nLine 3"

# I/O redirection: input from file.

exec echo "Just a few thoughts" > gorp.file
test exec-5.1 {redirecting input from file} {
    exec cat < gorp.file
} {Just a few thoughts}
test exec-5.2 {redirecting input from file} {
    exec cat | cat < gorp.file
} {Just a few thoughts}
test exec-5.3 {redirecting input from file} {
    exec cat < gorp.file | cat
} {Just a few thoughts}
test exec-5.4 {redirecting input from file} {
    exec < gorp.file cat | cat
} {Just a few thoughts}
test exec-5.5 {redirecting input from file} {
    exec cat <gorp.file
} {Just a few thoughts}
test exec-5.6 {redirecting input from file} {
    set f [open gorp.file r]
    set result [exec cat <@ $f]
    close $f
    set result
} {Just a few thoughts}
test exec-5.7 {redirecting input from file} {
    set f [open gorp.file r]
    set result [exec <@$f cat]
    close $f
    set result
} {Just a few thoughts}

# I/O redirection: standard error through a pipeline.

test exec-6.1 {redirecting stderr through a pipeline} {
    exec sh -c "echo foo bar" |& cat
} "foo bar"
test exec-6.2 {redirecting stderr through a pipeline} {
    exec sh -c "echo foo bar 1>&2" |& cat
} "foo bar"
test exec-6.3 {redirecting stderr through a pipeline} {
    exec sh -c "echo foo bar 1>&2" |& sh -c "echo second msg 1>& 2; cat" |& cat
} "second msg\nfoo bar"

# I/O redirection: combinations.

catch {exec rm -f gorp.file2}
test exec-7.1 {multiple I/O redirections} {
    exec << "command input" > gorp.file2 cat < gorp.file
    exec cat gorp.file2
} {Just a few thoughts}
test exec-7.2 {multiple I/O redirections} {
    exec < gorp.file << "command input" cat
} {command input}

# Long input to command and output from command.

set a "0123456789 xxxxxxxxx abcdefghi ABCDEFGHIJK\n"
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
test exec-8.1 {long input and output} {
    exec cat << $a
} $a

# Commands that return errors.

test exec-9.1 {commands returning errors} {
    set x [catch {exec gorp456} msg]
    list $x $msg [lindex $errorCode 0] [lrange $errorCode 2 end]
} {1 {couldn't find "gorp456" to execute} CHILDSTATUS 1}
test exec-9.2 {commands returning errors} {
    set x [catch {exec foo123 | gorp456} msg]
    set x1 {couldn't find "foo123" to execute
couldn't find "gorp456" to execute}
    set x2 {couldn't find "gorp456" to execute
couldn't find "foo123" to execute}
    set y [expr {($msg == $x1) || ($msg == $x2)}]
    list $x $y [lindex $errorCode 0] [lrange $errorCode 2 end]
} {1 1 CHILDSTATUS 1}
test exec-9.3 {commands returning errors} {
    list [catch {exec sleep 1 | sh -c "exit 43" | sleep 1} msg] $msg
} {1 {child process exited abnormally}}
test exec-9.4 {commands returning errors} {
    list [catch {exec gorp456 | echo a b c} msg] $msg
} {1 {a b c
couldn't find "gorp456" to execute}}
test exec-9.5 {commands returning errors} {
    list [catch {exec sh -c "echo error msg 1>&2"} msg] $msg
} {1 {error msg}}
test exec-9.6 {commands returning errors} {
    list [catch {exec sh -c "echo error msg 1>&2" | sh -c "echo error msg 1>&2"} msg] $msg
} {1 {error msg
error msg}}

# Errors in executing the Tcl command, as opposed to errors in the
# processes that are invoked.

test exec-10.1 {errors in exec invocation} {
    list [catch {exec} msg] $msg
} {1 {wrong # args: should be "exec ?switches? arg ?arg ...?"}}
test exec-10.2 {errors in exec invocation} {
    list [catch {exec | cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.3 {errors in exec invocation} {
    list [catch {exec cat |} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.4 {errors in exec invocation} {
    list [catch {exec cat | | cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.5 {errors in exec invocation} {
    list [catch {exec cat | |& cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.6 {errors in exec invocation} {
    list [catch {exec cat |&} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.7 {errors in exec invocation} {
    list [catch {exec cat <} msg] $msg
} {1 {can't specify "<" as last word in command}}
test exec-10.8 {errors in exec invocation} {
    list [catch {exec cat >} msg] $msg
} {1 {can't specify ">" as last word in command}}
test exec-10.9 {errors in exec invocation} {
    list [catch {exec cat <<} msg] $msg
} {1 {can't specify "<<" as last word in command}}
test exec-10.10 {errors in exec invocation} {
    list [catch {exec cat >>} msg] $msg
} {1 {can't specify ">>" as last word in command}}
test exec-10.11 {errors in exec invocation} {
    list [catch {exec cat >&} msg] $msg
} {1 {can't specify ">&" as last word in command}}
test exec-10.12 {errors in exec invocation} {
    list [catch {exec cat >>&} msg] $msg
} {1 {can't specify ">>&" as last word in command}}
test exec-10.13 {errors in exec invocation} {
    list [catch {exec cat >@} msg] $msg
} {1 {can't specify ">@" as last word in command}}
test exec-10.14 {errors in exec invocation} {
    list [catch {exec cat <@} msg] $msg
} {1 {can't specify "<@" as last word in command}}
test exec-10.15 {errors in exec invocation} {
    list [catch {exec cat < a/b/c} msg] [string tolower $msg]
} {1 {couldn't read file "a/b/c": no such file or directory}}
test exec-10.16 {errors in exec invocation} {
    list [catch {exec cat << foo > a/b/c} msg] [string tolower $msg]
} {1 {couldn't write file "a/b/c": no such file or directory}}
test exec-10.17 {errors in exec invocation} {
    list [catch {exec cat << foo > a/b/c} msg] [string tolower $msg]
} {1 {couldn't write file "a/b/c": no such file or directory}}
set f [open gorp.file w]
test exec-10.18 {errors in exec invocation} {
    list [catch {exec cat <@ $f} msg] $msg
} "1 {\"$f\" wasn't opened for reading}"
close $f
set f [open gorp.file r]
test exec-10.19 {errors in exec invocation} {
    list [catch {exec cat >@ $f} msg] $msg
} "1 {\"$f\" wasn't opened for writing}"
close $f

# Commands in background.

test exec-11.1 {commands in background} {
    set x [lindex [time {exec sleep 2 &}] 0]
    expr $x<1000000
} 1
test exec-11.2 {commands in background} {
    list [catch {exec echo a &b} msg] $msg
} {0 {a &b}}
test exec-11.3 {commands in background} {
    llength [exec sleep 1 &]
} 1
test exec-11.4 {commands in background} {
    llength [exec sleep 1 | sleep 1 | sleep 1 &]
} 3

# Make sure that background commands are properly reaped when
# they eventually die.

exec sleep 3
if $atBerkeley {
    test exec-12.1 {reaping background processes} {
	for {set i 0} {$i < 20} {incr i} {
	    exec echo foo > /dev/null &
	}
	exec sleep 1
	catch {exec ps | fgrep "echo foo" | fgrep -v fgrep | wc} msg
	lindex $msg 0
    } 0
    test exec-12.2 {reaping background processes} {
	exec sleep 2 | sleep 2 | sleep 2 &
	catch {exec ps | fgrep "sleep 2" | fgrep -v fgrep | wc} msg
	set x [lindex $msg 0]
	exec sleep 3
	catch {exec ps | fgrep "sleep 2" | fgrep -v fgrep | wc} msg
	list $x [lindex $msg 0]
    } {3 0}
    test exec-12.3 {reaping background processes} {
	exec sleep 1000 &
	exec sleep 1000 &
	set x [exec ps | fgrep "sleep 1000" | fgrep -v fgrep]
	set pids {}
	foreach i [split $x \n] {
	    lappend pids [lindex $i 0]
	}
	foreach i $pids {
	    catch {exec kill -STOP $i}
	}
	catch {exec ps | fgrep "sleep 1000" | fgrep -v fgrep | wc} msg
	set x [lindex $msg 0]
    
	foreach i $pids {
	    catch {exec kill -KILL $i}
	}
	catch {exec ps | fgrep "sleep 1000" | fgrep -v fgrep | wc} msg
	list $x [lindex $msg 0]
    } {2 0}
}

# Make sure "errorCode" is set correctly.

test exec-13.1 {setting errorCode variable} {
    list [catch {exec cat < a/b/c} msg] [string tolower $errorCode]
} {1 {posix enoent {no such file or directory}}}
test exec-13.2 {setting errorCode variable} {
    list [catch {exec cat > a/b/c} msg] [string tolower $errorCode]
} {1 {posix enoent {no such file or directory}}}
test exec-13.3 {setting errorCode variable} {
    set x [catch {exec _weirdo_command_} msg]
    list $x $msg [lindex $errorCode 0] [lrange $errorCode 2 end]
} {1 {couldn't find "_weirdo_command_" to execute} CHILDSTATUS 1}

# Switches before the first argument

test exec-14.1 {-keepnewline switch} {
    exec -keepnewline echo foo
} "foo\n"
test exec-14.2 {-keepnewline switch} {
    list [catch {exec -keepnewline} msg] $msg
} {1 {wrong # args: should be "exec ?switches? arg ?arg ...?"}}
test exec-14.3 {unknown switch} {
    list [catch {exec -gorp} msg] $msg
} {1 {bad switch "-gorp": must be -keepnewline or --}}
test exec-14.4 {-- switch} {
    list [catch {exec -- -gorp} msg] $msg
} {1 {couldn't find "-gorp" to execute}}

# Redirecting standard error separately from standard output

test exec-15.1 {standard error redirection} {
    exec echo "First line" > gorp.file
    list [exec sh -c "echo foo bar 1>&2" 2> gorp.file] \
	    [exec cat gorp.file]
} {{} {foo bar}}
test exec-15.2 {standard error redirection} {
    list [exec sh -c "echo foo bar 1>&2" | echo biz baz >gorp.file \
	    2> gorp.file2] [exec cat gorp.file] \
	    [exec cat gorp.file2]
} {{} {biz baz} {foo bar}}
test exec-15.3 {standard error redirection} {
    list [exec sh -c "echo foo bar 1>&2" | echo biz baz 2>gorp.file \
	    > gorp.file2] [exec cat gorp.file] \
	    [exec cat gorp.file2]
} {{} {foo bar} {biz baz}}
test exec-15.4 {standard error redirection} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec sh -c "echo foo bar 1>&2" 2>@ $f
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} {Line 1
foo bar
Line 3}
test exec-15.5 {standard error redirection} {
    exec echo "First line" > gorp.file
    exec sh -c "echo foo bar 1>&2" 2>> gorp.file
    exec cat gorp.file
} {First line
foo bar}
test exec-15.6 {standard error redirection} {
    exec sh -c "echo foo bar 1>&2" > gorp.file2 2> gorp.file \
	    >& gorp.file 2> gorp.file2 | echo biz baz
    list [exec cat gorp.file] [exec cat gorp.file2]
} {{biz baz} {foo bar}}

if $atBerkeley {
    test exec-16.1 {restore signal settings before exec} {
	set f [open {|cat exec.test} r]
	list [catch {close $f} msg] [string tolower $msg]
    } {1 {child killed: write on pipe with no readers}}
}

catch {exec rm -f gorp.file}
catch {exec rm -f gorp.file2}
return {}
